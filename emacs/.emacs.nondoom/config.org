#+title: Emacs config
#+startup: overview
#+property: header-args:elisp :tangle init.el :cache yes :results silent :padline no
#+property: header-args:emacs-lisp :tangle init.el :cache yes :results silent :padline no
#+auto_tangle: t

* Startup performance
** Lexical binding
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

** Startup time
#+begin_src elisp
(setq gc-cons-threshold (* 50 1000 1000))
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

* Native compilation
#+begin_src elisp
;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)

;; Set the right directory to store the native comp cache
(add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
#+end_src

* Package management
#+begin_src elisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

Use straight.el

#+begin_src elisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(straight-use-package '(org :local-repo nil))

#+end_src
* Keybinding system
** Evil
#+begin_src elisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-want-C-i-jump nil
        evil-respect-visual-line-mode t)
  :config
  (evil-mode 1))
#+end_src
*** Evil collection
#+begin_src elisp
(use-package evil-collection
  :after evil
  :init
  :custom
  (evil-collection-outline-bind-tab-p nil)
  :config
  (delete 'lispy evil-collection-mode-list)
  (delete 'org-present evil-collection-mode-list)
  (evil-collection-init))
#+end_src

** Which-key
#+begin_src elisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

** General leader key
#+begin_src elisp
(use-package general
  :config
  (general-evil-setup t)

  (general-create-definer eethern/leader-key-def
    :keymaps '(normal visual emacs)
    :prefix "SPC")

  (general-create-definer eethern/local-leader-def
    :keymaps '(normal visual emacs)
    :prefix "SPC m")

  (general-create-definer eethern/ctrl-c-keys
    :prefix "C-c")

  (eethern/leader-key-def
    :keymaps 'normal
    "" '(nil :which-key "Leader")
    "q" '(:ignore t :which-key "quit")
    "q r" '(restart-emacs :which-key "Restart emacs")
    "q q" '(quit-window :which-key "Quit emacs"))

)
#+end_src

* General Configuration
** Personal information
#+begin_src elisp
(setq user-full-name "Christoffer Arvidsson"
      user-mail-address "christoffer@arvidson.nu")
#+end_src
** User Interface
Hide ugly gui elements.
#+begin_src elisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)
(menu-bar-mode -1)
(setq visible-bell t)
#+end_src

Line numbers.
#+begin_src elisp
(column-number-mode)
(setq display-line-numbers-type 'relative)

(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+end_src

** Theme
#+begin_src elisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
        doom-horizon-brighter-comments t
        doom-horizon-comment-bg nil)

  (load-theme 'doom-horizon t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+end_src

** Font
Set the fonts.
#+begin_src elisp
(set-face-attribute 'default nil
                    :font "iosevka"
                    :weight 'normal
                    :height 120)

(set-face-attribute 'fixed-pitch nil
                    :font "iosevka"
                    :weight 'normal
                    :height 120)

(set-face-attribute 'variable-pitch nil
                    :font "Iosevka Aile"
                    :weight 'light
                    :height 500)
#+end_src

** Home buffer
I will make this use some kind of dashboard. For now, it's just an org file.
#+begin_src elisp
;; (use-package dashboard
;;   :ensure t
;;   :config
;;   (dashboard-setup-startup-hook))

(setq initial-buffer-choice (expand-file-name "start.org" user-emacs-directory))
#+end_src
* Navigation
** Windows
#+begin_src elisp
(defun +evil/window-move-left ()
  "Swap windows to the left."
  (interactive) (+evil--window-swap 'left))
(defun +evil/window-move-right ()
  "Swap windows to the right"
  (interactive) (+evil--window-swap 'right))
(defun +evil/window-move-up ()
  "Swap windows upward."
  (interactive) (+evil--window-swap 'up))
(defun +evil/window-move-down ()
  "Swap windows downward."
  (interactive) (+evil--window-swap 'down))

  (eethern/leader-key-def
    :keymaps 'normal
    "TAB" '(evil-switch-to-windows-last-buffer :which-key "Previous buffer")
    "w" '(nil :which-key "window")
    "w m" '(evil-window-left :which-key "Select window left")
    "w n" '(evil-window-down :which-key "Select window down")
    "w e" '(evil-window-up :which-key "Select window up")
    "w i" '(evil-window-right :which-key "Select window right")
    "w M" '(+evil/window-move-left :which-key "Move window left")
    "w N" '(+evil/window-move-down :which-key "Move window down")
    "w E" '(+evil/window-move-up :which-key "Move window up")
    "w I" '(+evil/window-move-right :which-key "Move window right")
    "w v" '(evil-window-vsplit :which-key "Vertical window split")
    "w s" '(evil-window-split :which-key "Horizontal window split")
    "w q" '(evil-quit :which-key "Evil quit")
    )

#+end_src
* File and buffer
** Delete current file
[[https://kundeveloper.com/blog/buffer-files/][Source]]

#+begin_src elisp
  (defun eethern/delete-current-buffer-file ()
    "Removes file connected to current buffer and kills buffer."
    (interactive)
    (let ((filename (buffer-file-name))
          (buffer (current-buffer))
          (name (buffer-name)))
      (if (not (and filename (file-exists-p filename)))
          (ido-kill-buffer)
        (when (yes-or-no-p "Are you sure you want to remove this file? ")
          (delete-file filename)
          (kill-buffer buffer)
          (message "File '%s' successfully removed" filename)))))

  (defun eethern/rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))
#+end_src
** Yes or no
Make "write yes/no" prompts into "press y/n" instead.
#+begin_src elisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Recentf
Track recent files.
#+begin_src elisp
(recentf-mode)
#+end_src

** Noo junk please we are unix
This will remove those pesky line-endings mac users seem blind to.
#+begin_src elisp
(defun no-junk-please-were-unixish ()
  (let ((coding-str (symbol-name buffer-file-coding-system)))
    (when (string-match "-\\(?:dos\\|mac\\)$" coding-str)
      (set-buffer-file-coding-system 'unix))))

(add-hook 'find-file-hooks 'no-junk-please-were-unixish)
#+end_src

** Keybindings

#+begin_src elisp
   (eethern/leader-key-def
    :keymaps 'normal
    "f" '(:ignore t :which-key "file")
    "f f" '(find-file :which-key "Find file")
    "f s" '(save-buffer :which-key "Save buffer")
    "f S" '(write-file :which-key "Save buffer as...")
    "f D" '(eethern/delete-current-buffer-file :which-key "Delete current file")
    "f R" '(eethern/rename-current-buffer-file :which-key "Move current file")
    "b" '(:ignore t :which-key "buffer")
    "b s" '(save-buffer :which-key "Save buffer")
    "b r" '(revert-buffer :which-key "Revert buffer")
    "b d" '(kill-this-buffer :which-key "Kill current buffer")
    )
#+end_src

* Editor
** General settings
*** Tab width
#+begin_src elisp
(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)
#+end_src
*** Spaces > tabs
#+begin_src elisp
(setq-default indent-tabs-mode nil)
#+end_src

*** Nerd-commenter
#+begin_src elisp
  (use-package evil-nerd-commenter
    :config
    (general-define-key
     :states 'normal
     "g c" '(evilnc-comment-operator :which-key "Comment operator")))
#+end_src

** Completion
*** Vertical completion
#+begin_src elisp
(use-package vertico
  :config
  (setq vertico-cycle t)
  (vertico-mode))
#+end_src

*** Orderless
#+begin_src elisp
(use-package orderless
  :config
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Marginalia
#+begin_src elisp
(use-package marginalia
  :init
  (marginalia-mode))
#+end_src
*** Persist history
#+begin_src elisp
(use-package savehist
  :config
  (savehist-mode))
#+end_src

*** Some useful emacs settings
#+begin_src elisp
(use-package emacs
  :config
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src
*** Company
#+begin_src elisp
(use-package company
  :config
  (global-company-mode 1))
#+end_src
** Expand region
#+begin_src elisp
(use-package expand-region
  :config
  (eethern/leader-key-def
   :keymaps 'normal
   "v" '(er/expand-region :which-key "Expand region")))
#+end_src

** Rainbow delimiters
#+begin_src elisp
(use-package rainbow-delimiters
  :ghook 'prog-mode-hook)
#+end_src

** Smartparens
#+begin_src elisp
(use-package smartparens
  :config
  (smartparens-global-mode))
#+end_src
* Org mode
** Org configuration
#+begin_src elisp
(defun eethern/org-mode-setup ()
  (org-indent-mode)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil))

(use-package org
  :ensure t
  :hook (org-mode . eethern/org-mode-setup)
  :config
  (setq org-directory "~/Dropbox/org/"
        org-id-locations-file "~/Dropbox/org/orbit/.orgids"
        org-capture-todo-file "~/Dropbox/org/agenda.org"
        org-pretty-entities nil
        org-hide-emphasis-markers t
        org-startup-with-inline-images "inlineimages"
        org-fontify-whole-heading-line t
        org-src-fontify-natively t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t
        org-latex-prefer-user-labels t
        org-id-track-globally t ;; Trach org ids globally for org-roam
        org-startup-truncated nil) ;; Force org to not truncate lines
#+end_src

#+begin_src elisp
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)
          ("\\.pdf\\'" . "zathura %s")
          ("\\.png\\'" . viewnior)
          ("\\.jpg\\'" . viewnior)
          ("\\.svg\\'" . viewnior)))
#+end_src
#+begin_src elisp
(set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.0)
(dolist (face '((org-level-1 . 1.2)
                (org-level-2 . 1.1)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'bold :height (cdr face)))

(require 'org-indent)
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

(set-face-attribute 'org-column nil :background nil)
(set-face-attribute 'org-column-title nil :background nil)
#+end_src
#+begin_src elisp
;; End the usebackage org
)
#+end_src

** Visuals
*** Superstar
#+begin_src elisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-hide-leading-stars nil)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
    (org-superstar-leading-bullet ?\s)
    (org-indent-mode-turns-on-hiding-stars nil))
#+end_src

*** Fancy priorities
#+begin_src elisp
(use-package org-fancy-priorities
  :ensure t
  :after org
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕")))
#+end_src
*** Writeroom-mode
#+begin_src elisp
(use-package visual-fill-column
  :ensure t)

(use-package writeroom-mode
  :after visual-fill-column)
#+end_src
** Block templates
#+begin_src elisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("cc" . "src sh"))
(add-to-list 'org-structure-template-alist '("el" . "src elisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src
** Org download
#+begin_src elisp
(defun org-download-named-screenshot (fname)
  (interactive "FEnter Filename:")
  (make-directory (file-name-directory fname) t)
  (if (functionp org-download-screenshot-method)
      (funcall org-download-screenshot-method fname)
    (shell-command-to-string
     (format org-download-screenshot-method fname)))
  (org-download-image fname))

(use-package org-download
  :after org
  :config
  (setq-default org-download-image-dir "../assets/images"
                org-download-heading-lvl nil)

  (setq org-download-image-dir "../assets/images")

  (setq org-download-screenshot-method "xfce4-screenshooter -r -o cat > %s"
        org-download-method 'directory
        org-download-link-format (concat "[[file:" org-download-image-dir "/%s]]\n")
        org-download-timestamp "%Y-%m-%d_%H-%M-%S_"))
#+end_src
** Jupyter
Bread and butter for using python in org-mode for notebook style execution.
Make a template for inserting jupyter blocks.
#+begin_src elisp
(use-package jupyter
  :after org
  :config
  (setq org-babel-python-command "~/.pyenv/shims/python")
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:kernel . "python3")
                                                       (:exports . "code")
                                                       (:session . "py")
                                                       (:eval . "never-export")))

  (add-to-list 'org-src-lang-modes '("jupyter-python" . python))
  (add-to-list 'org-structure-template-alist '("ju" . "src jupyter-python")))
#+end_src
** Auto tangle
Automatically tangle src blocks on save. Makes working with literate programming very nice since code is always up to date in tangled files.
#+begin_src elisp
(use-package org-auto-tangle
  :after org
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default nil))
#+end_src

** Org fragtog
#+begin_src elisp
  (defun update-org-latex-fragment-scale ()
    (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
      (plist-put org-format-latex-options :scale (* 1.5 text-scale-factor))))

  (use-package org-fragtog
    :config
    (add-hook 'org-mode-hook 'org-fragtog-mode)
    ;; (add-hook 'org-mode-hook 'update-org-latex-fragment-scale)
    )
#+end_src
** Keybindings
#+begin_src elisp
(use-package evil-org
  :after org
  :hook ((org-mode . evil-org-mode)
         (org-agenda-mode . evil-org-mode)))


#+end_src

#+begin_src elisp
;; Graciously stolen from doom emacs
(defun +org--get-foldlevel ()
  (let ((max 1))
    (save-restriction
      (narrow-to-region (window-start) (window-end))
      (save-excursion
        (goto-char (point-min))
        (while (not (eobp))
          (org-next-visible-heading 1)
          (when (outline-invisible-p (line-end-position))
            (let ((level (org-outline-level)))
              (when (> level max)
                (setq max level))))))
      max)))

(defun +org/show-next-fold-level (&optional count)
  "Decrease the fold-level of the visible area of the buffer. This unfolds
another level of headings on each invocation."
  (interactive "p")
  (let ((new-level (+ (+org--get-foldlevel) (or count 1))))
    (outline-hide-sublevels new-level)
    (message "Folded to level %s" new-level)))

(defun +org/close-all-folds (&optional level)
  "Close all folds in the buffer (or below LEVEL)."
  (interactive "p")
  (outline-hide-sublevels (or level 1)))

(defun +org/open-all-folds (&optional level)
  "Open all folds in the buffer (or up to LEVEL)."
  (interactive "P")
  (if (integerp level)
      (outline-hide-sublevels level)

    (outline-show-all)))

(eethern/local-leader-def
 :states 'normal
 :keymaps 'org-mode-map
 "a C" 'org-download-named-screenshot
 "k s" 'org-babel-demarcate-block
 "i l" 'org-cdlatex-environment-indent
 "i p" 'academic-phrases
 "i s" 'org-insert-structure-template
 "i P" 'academic-phrases-by-section
 "e" 'org-export-dispatch)


(general-define-key
 :states 'normal
 "z r" '+org/show-next-fold-level
 "z R" '+org/open-all-folds)
#+end_src

* Org roam
#+begin_src elisp
  (use-package org-roam
    :after org
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (file-truename "~/Dropbox/org/orbit/articles"))
    (org-roam-db-location (expand-file-name "org-roam.db" org-roam-directory))
    (+org-roam-open-buffer-on-find-file nil)
    (org-roam-auto-replace-fuzzy-links nil)
    :config
    (org-roam-db-autosync-mode t)
    (eethern/leader-key-def
      :keymaps 'normal
      "n" '(nil :which-key "Org roam")
      "n r" '(:ignore t :which-key "node")
      "n r f" '(org-roam-node-find :which-key "Find node")
      "n r s" '(org-roam-db-sync :which-key "Sync database")
      "n r i" '(org-roam-node-insert :which-key "Insert node"))
    (setq org-roam-capture-templates
          '(("l" "latex")
            ("ld" "temporary note" plain
             (file "~/.doom.d/templates/draft.org")
             :if-new (file "draft/%<%Y%m%d%H%M%S>-${slug}.org")
             :unnarrowed t)
            ("ll" "lecture note" plain
             (file "~/.doom.d/templates/lecture_note.org")
             :if-new (file "lecture/%<%Y%m%d%H%M%S>-${slug}.org")
             :unnarrowed t)
            ("lp" "permanent note" plain
             (file "~/.doom.d/templates/latex.org")
             :if-new (file "%<%Y%m%d%H%M%S>-${slug}.org")
             :unnarrowed t)
            ("ln" "notebook" plain
             (file "~/.doom.d/templates/notebook.org")
             :if-new (file "notebook/%<%Y%m%d%H%M%S>-${slug}.org")
             :unnarrowed t)
            ("le" "exercise" plain
             (file "~/.doom.d/templates/exercise.org")
             :if-new (file "exercise/%<%y%m%d%h%m%s>-${slug}.org")
             :unnarrowed t)
            ("p" "project" plain
             (file "~/.doom.d/templates/project.org")
             :if-new (file "project/${slug}/README.org")
             :unnarrowd t)
            )))

#+end_src
** Org roam ui
#+begin_src elisp
;; (use-package org-roam-ui
;;     :after org-roam ;; or :after org
;;     :config
;;     (setq org-roam-ui-sync-theme t
;;           org-roam-ui-follow t
;;           org-roam-ui-update-on-save t
;;           org-roam-ui-open-on-start t))
#+end_src
** Orbit
Personal wiki powered by org roam
#+begin_src elisp
  (setq orbit/directory "~/Dropbox/org/orbit"
        orbit/articles-directory (expand-file-name "articles" orbit/directory)
        orbit/assets-directory (expand-file-name "assets" orbit/directory)
        orbit/publish-directory (expand-file-name "public" orbit/directory))

 ;; (setq browse-url-browser-function 'browse-url-firefox
 ;;          browse-url-new-window-flag  t
 ;;          browse-url-firefox-new-window-is-tab t)

 ;;  (defun orbit/my-browse-url-mozilla-new-tab (url &optional new-window)
 ;;        ;; new-window ignored
 ;;        "Open URL in a new tab in Mozilla."
 ;;        (interactive (browse-url-interactive-arg "URL: "))
 ;;        (unless
 ;;            (string= "" 
 ;;                    (shell-command-to-string 
 ;;                      (concat "mozilla -remote 'openURL(" url ",new-tab)'")))
 ;;          (message "Starting Mozilla...")
 ;;          (start-process (concat "mozilla " url) nil "mozilla" url)
 ;;          (message "Starting Mozilla...done")))

 ;;  (defun orbit/open ()
 ;;    "Open the orbit index file"
 ;;    (interactive)
 ;;    (orbit/my-browse-url-mozilla-new-tab (expand-file-name "articles/index.html" orbit/publish-directory)))

 ;;  (eethern/leader-key-def
 ;;    :keymaps 'normal
 ;;    "n o" '(nil :which-key "Orbit")
 ;;    "n o o" '(orbit/open :which-key "Open index"))

  (defvar site-attachments
    (regexp-opt '("jpg" "jpeg" "gif" "png" "svg"
                  "ico" "cur" "css" "js" "woff" "html" "pdf")))
  (defun orbit/sitemap (title list)
    "Site map, as a string.
    TITLE is the title of the site map.  LIST is an internal
    representation for the files to include, as returned by
    `org-list-to-lisp'.  PROJECT is the current project."
    (concat "#+TITLE: " title "\n\n"
            "#+subtitle: Hello" "\n\n"
            (org-list-to-org list)))

  (setq orbit/backlinks-section "\n* Backlinks\n:PROPERTIES:\n:CUSTOM_ID: backlinks\n:END:\n\nNotes that link to this note.\n")

  (defun orbit/collect-backlinks-string (backend)
    "Insert backlinks into the end of the org file before parsing it."
    (when (org-roam-node-at-point)
      (goto-char (point-max))
      ;; Add a new header for the references
      (insert orbit/backlinks-section)
      (let* ((backlinks (org-roam-backlinks-get (org-roam-node-at-point))))
        (dolist (backlink backlinks)
          (let* ((source-node (org-roam-backlink-source-node backlink)))
            (insert
             (format "- [[./%s][%s]]\n"
                     (file-name-nondirectory (org-roam-node-file source-node))
                     (org-roam-node-title source-node))))))))

  (add-hook 'org-export-before-processing-hook 'orbit/collect-backlinks-string)

  (setq org-publish-project-alist
        (list
         (list "site-org"
               :auto-sitemap t
               :base-directory orbit/articles-directory
               :base-extension "org"
               :exclude (regexp-opt '("README" "lecture" "draft" "old_notes" "daily" "project" "notebook"))
               :html-head-extra"<link rel=\"icon\" type=\"image/gif\" href=\"../assets/favicon.gif\"/><link rel=\"stylesheet\" href=\"../assets/css/style.css\" type=\"text/css\"/>"
               :html-postamble: t
               :htmlized-source t
               :publishing-directory (expand-file-name "articles" orbit/publish-directory)
               :publishing-function '(org-html-publish-to-html)
               :recursive t
               :sitemap-file-entry-format "%d *%t*"
               :sitemap-filename "index.org"
               :sitemap-sort-files 'anti-chronologically
               :sitemap-style 'list
               :sitemap-function 'orbit/sitemap
               :sitemap-title "Notes from university"
               :with-toc t
               :html-head-include-default-style nil
               :html-head-include-scripts t)
         (list "site-static"
               :base-directory orbit/assets-directory
               :exclude orbit/publish-directory
               :base-extension site-attachments
               :publishing-directory (expand-file-name "assets" orbit/publish-directory)
               :publishing-function 'org-publish-attachment
               :recursive t)
         (list "site" :components '("site-org" "site-static"))))
#+end_src

* Development
** Projectile
#+begin_src elisp
(use-package projectile
  :config
  (eethern/leader-key-def
   :keymaps 'normal'
   "SPC" '(projectile-commander :which-key "Find file in project")
   "p" '(:ignore t :which-key "project")
   "p c" '(projectile-compile-project :which-key "Compile project")
   "p f" '(projectile-find-file :which-key "Find file in project")
   "p r" '(projectile-recentf :which-key "Find recent file in project")
   "p p" '(projectile-switch-project :which-key "Switch project"))

  (projectile-mode 1))
#+end_src
** Consult
#+begin_src elisp
(use-package consult
  :demand t
  :config
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root)
  (eethern/leader-key-def
    :keymaps 'normal
    "f r" '(consult-recent-file :which-key "Recent files")
    "b b" '(consult-buffer :which-key "Switch buffer")
    "s i" '(consult-imenu :which-key "Jump to symbol")))
#+end_src
** Version control
*** Magit
#+begin_src elisp
(use-package magit
  :config
  (eethern/leader-key-def
   :keymaps 'normal
   "g" '(:ignore t :which-key "git")
   "g g" '(magit-status :which-key "Magit status")))
#+end_src
** Languages
*** Python
#+begin_src elisp
(use-package anaconda-mode
  :defer t
  :hook (python-mode . anaconda-mode))
#+end_src
*** C/C++
#+begin_src elisp
(use-package ccls
  :hook ((c-mode c++-mode objc-mode cuda-mode) .
         (lambda () (require 'ccls) (lsp))))
#+end_src
** Syntax checking
*** LSP
#+begin_src elisp
(use-package lsp-mode
  :straight t
  :commands lsp
  :hook ((python-mode cc-mode) . lsp)
  :bind (:map lsp-mode-map
         ("TAB" . completion-at-point))
  :custom (lsp-headerline-breadcrumb-enable nil))

(eethern/leader-key-def
  "l"  '(:ignore t :which-key "lsp")
  "ld" 'xref-find-definitions
  "lr" 'xref-find-references
  "ln" 'lsp-ui-find-next-reference
  "lp" 'lsp-ui-find-prev-reference
  "ls" 'counsel-imenu
  "le" 'lsp-ui-flycheck-list
  "lS" 'lsp-ui-sideline-mode
  "lX" 'lsp-execute-code-action)

(use-package lsp-ui
  :straight t
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-sideline-enable t)
  (setq lsp-ui-sideline-show-hover nil)
  (setq lsp-ui-doc-position 'bottom)
  (lsp-ui-doc-show))
#+end_src

*** Flycheck
#+begin_src elisp
(use-package flycheck
  :defer t
  :hook (lsp-mode . flycheck-mode))
#+end_src
* Runtime performance
#+begin_src elisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src

