#+title: Emacs config
#+startup: overview
#+property: header-args:elisp :tangle ~/.emacs.nondoom/init.el :cache no :results silent :padline no
#+property: header-args:emacs-lisp :tangle ~/.emacs.nondoom/init.el :cache no :results silent :padline no
#+auto_tangle: t

* Startup performance
** Lexical binding
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

** Startup time
#+begin_src elisp
(setq gc-cons-threshold (* 50 1000 1000))
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

* Native compilation
#+begin_src elisp
;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)

;; Set the right directory to store the native comp cache
(add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
#+end_src

* Package management
** Archives
#+begin_src elisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ;; ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

** Straight
Use straight.el

#+begin_src elisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(straight-use-package '(org :local-repo nil))

#+end_src

* General Configuration
** Personal information
#+begin_src elisp
(setq user-full-name "Christoffer Arvidsson"
      user-mail-address "christoffer@arvidson.nu")
#+end_src
** User Interface
Hide ugly gui elements.
#+begin_src elisp
(defun my/disable-scroll-bars (frame)
  (modify-frame-parameters frame
                           '((vertical-scroll-bars . nil)
                             (horizontal-scroll-bars . nil))))
(add-hook 'after-make-frame-functions 'my/disable-scroll-bars)

(scroll-bar-mode -1)
(global-hl-line-mode +1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 5)
(menu-bar-mode -1)
(setq-default display-line-numbers-width 3)
(setq visible-bell t)
#+end_src

Line numbers.
#+begin_src elisp
(column-number-mode)
(setq display-line-numbers-type 'relative)

(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+end_src

** Theme
#+begin_src elisp
(use-package doom-themes
  :ensure t
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  (doom-horizon-brighter-comments t)
  (doom-horizon-comment-bg nil)
  (doom-themes-padded-modeline t)
  :config

  (load-theme 'doom-horizon t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))


#+end_src

#+begin_src elisp
;; (use-package solaire-mode
;;   :ensure t
;;   :config
;;   (solaire-global-mode +1))
#+end_src

** Font
Set the fonts.
#+begin_src elisp
(defun eethern/set-font-faces ()
  (set-face-attribute 'default nil
                      :font "Iosevka"
                      :weight 'normal
                      :height 120)

  (set-face-attribute 'fixed-pitch nil
                      :font "Iosevka"
                      :weight 'normal
                      :height 110)

  (set-face-attribute 'variable-pitch nil
                      :font "Iosevka Aile"
                      :weight 'light
                      :height 110))

;; Required so that emacs client changes font
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (eethern/set-font-faces))))
  (eethern/set-font-faces))
#+end_src

** Home buffer
#+begin_src elisp
(defun my/dashboard-banner ()
  """Set a dashboard banner including information on package initialization
       time and garbage collections."""
  (setq dashboard-banner-logo-title
        (format "Emacs ready in %.2f seconds with %d garbage collections."
                (float-time (time-subtract after-init-time before-init-time)) gcs-done)))

(use-package dashboard
  :init
  (add-hook 'after-init-hook 'dashboard-refresh-buffer)
  (add-hook 'dashboard-mode-hook 'my/dashboard-banner)
  :config
  (setq dashboard-startup-banner 'logo
        dashboard-center-content t
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-set-navigator t
        dashboard-items '((recents . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5)))
  
  (dashboard-setup-startup-hook))

;; Makes emacsclient default to the dashboard
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
** Default applications
#+begin_src elisp
(setq browse-url-browser-function 'browse-url-firefox)
#+end_src
** Icons
#+begin_src elisp
(use-package all-the-icons
  :ensure t
  :custom
  (doom-modeline-icon t))

;; A workaround for missing all-the-icons in neotree when starting emacs in client mode
;; Ref:
;;   - https://github.com/jaypei/emacs-neotree/issues/194
;;   - https://emacs.stackexchange.com/questions/24609/determine-graphical-display-on-startup-for-emacs-server-client
(defun new-frame-setup (frame)
  (if (display-graphic-p frame)
      (setq neo-theme 'icons)))
;; Run for already-existing frames (For single instance emacs)
(mapc 'new-frame-setup (frame-list))
;; Run when a new frame is created (For emacs in client/server mode)
(add-hook 'after-make-frame-functions 'new-frame-setup)

(use-package all-the-icons-completion
  :ensure all-the-icons
  :config
  (all-the-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src

** Modeline
#+begin_src elisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-height 15)
  (doom-modeline-window-width-limit fill-column)
  (doom-modeline-lsp t)
  (doom-modeline-github t)
  (doom-modeline-env-enable-python t)
  (doom-modeline-minor-modes nil)
  (doom-modeline-persp-name t)
  (doom-modeline-project-detection 'auto)
  (doom-modeline-icon (display-graphic-p))
  (doom-modeline-buffer-file-name-style 'truncate-except-project))
#+end_src
* Editor
** General settings
*** Tab width
#+begin_src elisp
(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)
#+end_src
*** Spaces > tabs
#+begin_src elisp
(setq-default indent-tabs-mode nil)
#+end_src

** General leader key
#+begin_src elisp
(use-package general
  :config
  (general-evil-setup t)

  (general-create-definer eethern/leader-key-def
    :keymaps '(normal visual emacs)
    :prefix "SPC")

  (general-create-definer eethern/local-leader-def
    :keymaps '(normal visual emacs)
    :prefix "SPC m")

  (general-create-definer eethern/ctrl-c-keys
    :prefix "C-c")
  
  (defadvice keyboard-escape-quit (around my-keyboard-escape-quit activate)
    (let (orig-one-window-p)
      (fset 'orig-one-window-p (symbol-function 'one-window-p))
      (fset 'one-window-p (lambda (&optional nomini all-frames) t))
      (unwind-protect
          ad-do-it
        (fset 'one-window-p (symbol-function 'orig-one-window-p)))))
  
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  
  (eethern/leader-key-def
    :keymaps 'normal
    "" '(nil :wk "Leader")
    "o" '(:ignore t :wk "open")
    "q" '(:ignore t :wk "quit")
    "q r" '(restart-emacs :wk "Restart emacs")
    "q q" '(quit-window :wk "Quit emacs"))
  )
#+end_src

** Evil
#+begin_src elisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-want-C-i-jump nil
        evil-want-Y-yank-to-eol t
        evil-kill-on-visual-paste nil
        evil-undo-system 'undo-tree
        evil-respect-visual-line-mode t)
  :config
  (evil-mode 1))
#+end_src
*** Evil collection
#+begin_src elisp
(use-package evil-collection
  :after evil
  :init
  :custom
  (evil-collection-outline-bind-tab-p nil)
  :config
  (delete 'lispy evil-collection-mode-list)
  (delete 'org-present evil-collection-mode-list)
  (evil-collection-init)
  )
#+end_src

** Which-key
#+begin_src elisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

** Nerd-commenter
#+begin_src elisp
(use-package evil-nerd-commenter
  :config
  (general-define-key
   :states 'normal
   "g c" '(evilnc-comment-operator :wk "Comment operator")))
#+end_src

** Completion
*** Vertical completion
#+begin_src elisp
(use-package vertico
  :custom
  (vertico-cycle t)
  (vertico-count 13)
  (vertico-resize t)
  :config
  (vertico-mode))
#+end_src

*** Orderless
#+begin_src elisp
(defun just-one-face (fn &rest args)
  (let ((orderless-match-faces [completions-common-part]))
    (apply fn args)))

(use-package orderless
  :after company
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion))))
  (orderless-component-separator "[ &]")
  :config
  (advice-add 'company-capf--candidates :around #'just-one-face))
#+end_src

*** Marginalia
#+begin_src elisp
(use-package marginalia
  :init
  (marginalia-mode))
#+end_src
*** Embark
#+begin_src elisp
(use-package embark
  :ensure t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-," . embark-collect)         ;; pick some comfortable binding
   ("M-." . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :custom
  (embark-prompter 'embark-completing-read-prompter)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
*** Persist history
#+begin_src elisp
(use-package savehist
  :config
  (savehist-mode))
#+end_src

*** Some useful emacs settings
#+begin_src elisp
(use-package emacs
  :config
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src
*** Company
#+begin_src elisp
(use-package company
  :custom
  (company-minimum-prefix-length 4)
  (completion-ignore-case t)
  (company-idle-delay 0.5)
  :hook (after-init . global-company-mode)
  :config
  (add-to-list 'company-backends 'company-capf))
#+end_src
** Expand region
#+begin_src elisp
(use-package expand-region
  :config
  (eethern/leader-key-def
    :keymaps 'normal
    "v" '(er/expand-region :wk "Expand region")))
#+end_src

** Rainbow delimiters and rainbow mode
#+begin_src elisp
(use-package rainbow-delimiters
  :ghook 'prog-mode-hook)

(use-package rainbow-mode
  :hook ((prog-mode . rainbow-mode)
         (conf-mode . rainbow-mode)))
#+end_src

** Smartparens
#+begin_src elisp
(use-package smartparens
  :config
  (smartparens-global-mode))
#+end_src
** Evil snipe
#+begin_src elisp
(use-package evil-snipe
  :ensure t
  :config
  (evil-snipe-mode +1)
  (add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode)
  (evil-snipe-override-mode +1))
#+end_src
** Evil surround
#+begin_src elisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+end_src
** Avy
#+begin_src elisp
(use-package avy
  :config
  (general-define-key
   :states 'normal
   "g s" 'evil-avy-goto-char-timer
   ))
#+end_src
** iedit
#+begin_src elisp
(use-package iedit
  :ensure t)
#+end_src
** Undo tree
Apparently emacs can undo undos. Don't do that
#+begin_src elisp
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode))
#+end_src
* Navigation
** Windows
#+begin_src elisp
(defun +evil--window-swap (direction)
  "Move current window to the next window in DIRECTION.
If there are no windows there and there is only one window, split in that
direction and place this window there. If there are no windows and this isn't
the only window, use evil-window-move-* (e.g. `evil-window-move-far-left')."
  (when (window-dedicated-p)
    (user-error "Cannot swap a dedicated window"))
  (let* ((this-window (selected-window))
         (this-buffer (current-buffer))
         (that-window (windmove-find-other-window direction nil this-window))
         (that-buffer (window-buffer that-window)))
    (when (or (minibufferp that-buffer)
              (window-dedicated-p this-window))
      (setq that-buffer nil that-window nil))
    (if (not (or that-window (one-window-p t)))
        (funcall (pcase direction
                   ('left  #'evil-window-move-far-left)
                   ('right #'evil-window-move-far-right)
                   ('up    #'evil-window-move-very-top)
                   ('down  #'evil-window-move-very-bottom)))
      (unless that-window
        (setq that-window
              (split-window this-window nil
                            (pcase direction
                              ('up 'above)
                              ('down 'below)
                              (_ direction))))
        (with-selected-window that-window
          (switch-to-buffer (doom-fallback-buffer)))
        (setq that-buffer (window-buffer that-window)))
      (with-selected-window this-window
        (switch-to-buffer that-buffer))
      (with-selected-window that-window
        (switch-to-buffer this-buffer))
      (select-window that-window))))

(defun +evil/window-move-left ()
  "Swap windows to the left."
  (interactive) (+evil--window-swap 'left))
(defun +evil/window-move-right ()
  "Swap windows to the right"
  (interactive) (+evil--window-swap 'right))
(defun +evil/window-move-up ()
  "Swap windows upward."
  (interactive) (+evil--window-swap 'up))
(defun +evil/window-move-down ()
  "Swap windows downward."
  (interactive) (+evil--window-swap 'down))

(eethern/leader-key-def
  :keymaps 'normal
  "TAB" '(evil-switch-to-windows-last-buffer :wk "Previous buffer")
  "w" '(nil :wk "window")
  "w m" '(evil-window-left :wk "Select window left")
  "w n" '(evil-window-down :wk "Select window down")
  "w e" '(evil-window-up :wk "Select window up")
  "w i" '(evil-window-right :wk "Select window right")
  "w M" '(+evil/window-move-left :wk "Move window left")
  "w N" '(+evil/window-move-down :wk "Move window down")
  "w E" '(+evil/window-move-up :wk "Move window up")
  "w I" '(+evil/window-move-right :wk "Move window right")
  "w v" '(evil-window-vsplit :wk "Vertical window split")
  "w s" '(evil-window-split :wk "Horizontal window split")
  "w q" '(evil-quit :wk "Evil quit")
  "w =" '(balance-windows :wk "Balance windows")

  ;; For standard vi bindings
  "w h" '(evil-window-left :wk "Select window left")
  "w j" '(evil-window-down :wk "Select window down")
  "w k" '(evil-window-up :wk "Select window up")
  "w l" '(evil-window-right :wk "Select window right")
  "w H" '(+evil/window-move-left :wk "Move window left")
  "w J" '(+evil/window-move-down :wk "Move window down")
  "w K" '(+evil/window-move-up :wk "Move window up")
  "w L" '(+evil/window-move-right :wk "Move window right")
  )

#+end_src

** Half page scrolling
My keyboard uses PAGE up and PAGE down in place of vims C-d and C-u,
but these scroll full pages. This makes them scroll half pages
instead.
#+begin_src elisp
  (defun eethern/scroll-half-page (direction)
    "Scrolls half page up if `direction' is non-nil, otherwise will scroll half page down."
    (let ((opos (cdr (nth 6 (posn-at-point)))))
      ;; opos = original position line relative to window
      (move-to-window-line nil)  ;; Move cursor to middle line
      (if direction
          (recenter-top-bottom -1)  ;; Current line becomes last
        (recenter-top-bottom 0))  ;; Current line becomes first
      (move-to-window-line opos)))  ;; Restore cursor/point position
  
  (defun eethern/scroll-half-page-down ()
    "Scrolls exactly half page down keeping cursor/point position."
    (interactive)
    (eethern/scroll-half-page nil))
  
  (defun eethern/scroll-half-page-up ()
    "Scrolls exactly half page up keeping cursor/point position."
    (interactive)
    (eethern/scroll-half-page t))

(general-define-key
 :states 'normal
 "<prior>" 'eethern/scroll-half-page-up
 "<next>" 'eethern/scroll-half-page-down
 )
#+end_src

* File and buffer
** Delete current file
[[https://kundeveloper.com/blog/buffer-files/][Source]]

#+begin_src elisp
(defun eethern/delete-current-buffer-file ()
  "Removes file connected to current buffer and kills buffer."
  (interactive)
  (let ((filename (buffer-file-name))
        (buffer (current-buffer))
        (name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
        (ido-kill-buffer)
      (when (yes-or-no-p "Are you sure you want to remove this file? ")
        (delete-file filename)
        (kill-buffer buffer)
        (message "File '%s' successfully removed" filename)))))

(defun eethern/rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
#+end_src
** Yes or no
Make "write yes/no" prompts into "press y/n" instead.
#+begin_src elisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Recentf
Track recent files.
#+begin_src elisp
(recentf-mode)
#+end_src

** Supersave
#+begin_src elisp
(use-package super-save
  :ensure t
  :custom
  (super-save-auto-save-when-idle t)
  (auto-save-default nil)
  :config
  (super-save-mode +1))
#+end_src
** Noo junk please we are unix
This will remove those pesky line-endings mac users seem blind to.
#+begin_src elisp
(defun no-junk-please-were-unixish ()
  (let ((coding-str (symbol-name buffer-file-coding-system)))
    (when (string-match "-\\(?:dos\\|mac\\)$" coding-str)
      (set-buffer-file-coding-system 'unix))))

(add-hook 'find-file-hooks 'no-junk-please-were-unixish)
#+end_src

** Backup files
#+begin_src elisp
(setq backup-directory-alist '(("." . "~/.emacsbackups"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      )

#+end_src
** Yank current file path
Stolen from doom emacs
#+begin_src elisp
(defun doom/yank-buffer-path (&optional root)
  "Copy the current buffer's path to the kill ring."
  (interactive)
  (if-let (filename (or (buffer-file-name (buffer-base-buffer))
                        (bound-and-true-p list-buffers-directory)))
      (message "Copied path to clipboard: %s"
               (kill-new (abbreviate-file-name
                          (if root
                              (file-relative-name filename root)
                            filename))))
    (error "Couldn't find filename in current buffer")))
#+end_src
** Ranger
#+begin_src elisp
(use-package ranger
  :defer t)
#+end_src
** Keybindings

#+begin_src elisp
(eethern/leader-key-def
  :keymaps 'normal
  "f" '(:ignore t :wk "file")
  "f f" '(find-file :wk "Find file")
  "f s" '(save-buffer :wk "Save buffer")
  "f p" '(find-file user-emacs-directory :wk "Find emacs config file")
  "f y" '(doom/yank-buffer-path :wk "Yank buffer path")
  "f S" '(write-file :wk "Save buffer as...")
  "f D" '(eethern/delete-current-buffer-file :wk "Delete current file")
  "f R" '(eethern/rename-current-buffer-file :wk "Move current file")
  "b" '(:ignore t :wk "buffer")
  "b s" '(save-buffer :wk "Save buffer")
  "b r" '(revert-buffer :wk "Revert buffer")
  "b d" '(kill-this-buffer :wk "Kill current buffer")
  "o r" '(ranger :wk "Open ranger")
  )
#+end_src

* Org mode
** Org configuration
#+begin_src elisp
(defun eethern/org-mode-setup ()
  (org-indent-mode)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil)
  
  (set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.0)
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'bold :height (cdr face)))

  (require 'org-indent)
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  (set-face-attribute 'org-column nil :background nil)
  (set-face-attribute 'org-column-title nil :background nil))

(use-package org
  :ensure org-plus-contrib
  :hook 'eethern/org-mode-setup
  (org-babel-after-execute . org-redisplay-inline-images)
  (org-mode . turn-on-flyspell)
  :config
  (setq org-auto-align-tags nil
        org-tags-column 0
        org-capture-todo-file (file-truename "~/Dropbox/org/agenda.org")
        org-capture-work-file (file-truename "~/Dropbox/org/work.org")
        org-drill-file (file-truename "~/Dropbox/org/drill.org")
        org-edit-src-content-indentation 2
        org-export-use-babel t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t
        org-fontify-whole-heading-line t
        org-hide-emphasis-markers t
        org-id-locations-file (file-truename "~/Dropbox/org/orbit/.orgids")
        org-id-track-globally t ;; Trach org ids globally for org-roam
        org-indent-mode t
        org-latex-prefer-user-labels t
        org-pretty-entities nil
        org-return-follows-link  t
        org-src-fontify-natively t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t
        org-startup-indented t
        org-startup-truncated nil ;; Force org to not truncate lines
        org-startup-with-inline-images "inlineimages"
        org-directory (file-truename "~/Dropbox/org/"))

  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)
          ("\\.pdf\\'" . "zathura %s")
          ("\\.png\\'" . viewnior)
          ("\\.jpg\\'" . viewnior)
          ("\\.svg\\'" . viewnior))))

#+end_src

** Visuals
*** modern org
#+begin_src elisp
(use-package org-modern
  :after org
  :hook (org-mode . org-modern-mode))
#+end_src
** Block templates
#+begin_src elisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("el" . "src elisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("as" . "aside"))
(add-to-list 'org-structure-template-alist '("al" . "algorithm"))
(add-to-list 'org-structure-template-alist '("pr" . "proof"))
(add-to-list 'org-structure-template-alist '("th" . "theorem"))
(add-to-list 'org-structure-template-alist '("cs" . "columns"))
(add-to-list 'org-structure-template-alist '("co" . "column"))

(add-to-list 'org-tempo-keywords-alist '("on" . "name"))
(add-to-list 'org-tempo-keywords-alist '("oc" . "caption"))
(add-to-list 'org-tempo-keywords-alist '("oo" . "attr_org"))
(add-to-list 'org-tempo-keywords-alist '("ol" . "attr_latex"))
#+end_src

** Org download
#+begin_src elisp
(defun org-download-named-screenshot (fname)
  (interactive "FEnter Filename:")
  (make-directory (file-name-directory fname) t)
  (if (functionp org-download-screenshot-method)
      (funcall org-download-screenshot-method fname)
    (shell-command-to-string
     (format org-download-screenshot-method fname)))
  (org-download-image fname))

(use-package org-download
  :after org
  :config
  (setq org-download-screenshot-method "xfce4-screenshooter -r -o cat > %s"
        org-download-method 'directory
        org-download-timestamp "%Y-%m-%d_%H-%M-%S_")
  (setq-default org-download-image-dir "../assets/images"
                org-download-heading-lvl nil))

#+end_src
** Latex
*** Wrap lines
Wrap text when in latex mode. This is useful for version controlling
latex, and making the text more readable in the editor.
#+begin_src elisp
(add-hook 'latex-mode-hook #'auto-fill-mode)
(add-hook 'latex-mode-hook #'visual-line-mode)
(add-hook 'latex-mode-hook #'visual-fill-column-mode)
(add-hook 'latex-mode-hook (lambda () (set-fill-column 80)))
#+end_src
*** Auctex
#+begin_src elisp
(use-package auctex
  :straight (:type git :host nil :repo "https://git.savannah.gnu.org/git/auctex.git"
                   :pre-build ((shell-command "./autogen.sh && ./configure --without-texmf-dir --with-lispdir=. && make")))
  :mode
                                        ; https://www.mail-archive.com/auctex@gnu.org/msg07608.html
                                        ; https://www.gnu.org/software/emacs/manual/html_node/reftex/Installation.html
  ("\\.tex\\'" . latex-mode) ; Must first activate the inferior Emacs latex mode
  :hook
  (LaTeX-mode . TeX-PDF-mode)
  (LaTeX-mode . company-mode)
  (LaTeX-mode . flyspell-mode)
  (LaTeX-mode . flycheck-mode)
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . turn-on-reftex)
  (LaTeX-mode . turn-on-cdlatex)
  :init
  (load "auctex.el" nil t t) 
  ;; (load "preview-latex.el" nil t t)
  (require 'reftex) 

  (setq-default TeX-master 'dwim)

  (setq TeX-data-directory (straight--repos-dir "auctex")
        TeX-lisp-directory TeX-data-directory                   

                                        ; Or custom-set-variables as follows.
                                        ; M-x describe-variable RET preview-TeX-style-dir RET
                                        ;`(preview-TeX-style-dir ,(concat ".:" (straight--repos-dir "auctex") "latex:"))
        preview-TeX-style-dir (concat ".:" (straight--repos-dir "auctex") "latex:")

        TeX-parse-self t ; parse on load
        TeX-auto-save t  ; parse on save
        TeX-auto-untabify t ; Automatically remove all tabs from a file before saving it. 

                                        ;Type of TeX engine to use.
                                        ;It should be one of the following symbols:
                                        ;* ‘default’
                                        ;* ‘luatex’
                                        ;* ‘omega’
                                        ;* ‘xetex’
        TeX-engine 'xetex
        TeX-auto-local ".auctex-auto" ; Directory containing automatically generated TeX information.
        TeX-style-local ".auctex-style" ; Directory containing hand generated TeX information.

        ;; ##### Enable synctex correlation. 
        ;; ##### From Okular just press `Shift + Left click' to go to the good line. 
        ;; ##### From Evince just press `Ctrl + Left click' to go to the good line.      
        TeX-source-correlate-mode t
        TeX-source-correlate-method 'synctex
        TeX-source-correlate-start-server t

        ;; automatically insert braces after sub/superscript in math mode
        TeX-electric-sub-and-superscript t 
        ;; If non-nil, then query the user before saving each file with TeX-save-document.  
        TeX-save-query nil

        TeX-view-program-selection '((output-pdf "PDF Tools"))
        ))
#+end_src

*** cdlatex
#+begin_src elisp
(use-package cdlatex
  :ensure auctex
  :hook (org-mode . org-cdlatex-mode))
#+end_src

*** Org fragtog
#+begin_src elisp
(defun update-org-latex-fragment-scale ()
  (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
    (plist-put org-format-latex-options :scale (* 1.8 text-scale-factor))))

(use-package org-fragtog
  :ensure t
  :config
  (add-hook 'org-mode-hook 'org-fragtog-mode)
  (add-hook 'org-mode-hook 'update-org-latex-fragment-scale)
  (setq org-fragtog-ignore-predicates '(org-at-table-p)))
#+end_src
*** Citar
#+begin_src elisp
(use-package citar
  :no-require
  :bind (:map minibuffer-local-map
              ("M-b" . citar-insert-preset))
  :custom
  (citar-bibliography '("~/Dropbox/org/bibliography/references.bib"))
  (citar-notes-paths '("~/Dropbox/org/bibliography/"))
  (org-cite-global-bibliography '("~/Dropbox/org/bibliography/references.bib"))
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (citar-symbols
   `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
     (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
     (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
  (citar-symbol-separator "  ")
  )

#+end_src
*** Minted
#+begin_src elisp
(with-eval-after-load 'org
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
  (setq org-src-fontify-natively t))
#+end_src
*** Format latex blocks
#+begin_src elisp
(setq org-highlight-latex-and-related '(native script entities))
(require 'org-src)
(add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t)))

(setq org-format-latex-header "\\documentclass{article}
\\usepackage[usenames]{xcolor}

\\usepackage[T1]{fontenc}

\\usepackage{booktabs}

\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}
")

(setq org-format-latex-options
      (plist-put org-format-latex-options :background "Transparent"))
#+end_src
*** Equation numbering
#+begin_src elisp
;; Numbered equations all have (1) as the number for fragments with vanilla
;; org-mode. This code injects the correct numbers into the previews so they
;; look good.
(defun scimax-org-renumber-environment (orig-func &rest args)
  "A function to inject numbers in LaTeX fragment previews."
  (let ((results '())
        (counter -1)
        (numberp))
    (setq results (cl-loop for (begin . env) in
                           (org-element-map (org-element-parse-buffer) 'latex-environment
                             (lambda (env)
                               (cons
                                (org-element-property :begin env)
                                (org-element-property :value env))))
                           collect
                           (cond
                            ((and (string-match "\\\\begin{equation}" env)
                                  (not (string-match "\\\\tag{" env)))
                             (cl-incf counter)
                             (cons begin counter))
                            ((string-match "\\\\begin{align}" env)
                             (prog2
                                 (cl-incf counter)
                                 (cons begin counter)
                               (with-temp-buffer
                                 (insert env)
                                 (goto-char (point-min))
                                 ;; \\ is used for a new line. Each one leads to a number
                                 (cl-incf counter (count-matches "\\\\$"))
                                 ;; unless there are nonumbers.
                                 (goto-char (point-min))
                                 (cl-decf counter (count-matches "\\nonumber")))))
                            (t
                             (cons begin nil)))))

    (when (setq numberp (cdr (assoc (point) results)))
      (setf (car args)
            (concat
             (format "\\setcounter{equation}{%s}\n" numberp)
             (car args)))))

  (apply orig-func args))


(defun scimax-toggle-latex-equation-numbering ()
  "Toggle whether LaTeX fragments are numbered."
  (interactive)
  (if (not (get 'scimax-org-renumber-environment 'enabled))
      (progn
        (advice-add 'org-create-formula-image :around #'scimax-org-renumber-environment)
        (put 'scimax-org-renumber-environment 'enabled t)
        (message "Latex numbering enabled"))
    (advice-remove 'org-create-formula-image #'scimax-org-renumber-environment)
    (put 'scimax-org-renumber-environment 'enabled nil)
    (message "Latex numbering disabled.")))

(advice-add 'org-create-formula-image :around #'scimax-org-renumber-environment)
(put 'scimax-org-renumber-environment 'enabled t)
#+end_src
** Productivity
*** Agenda settings
#+begin_src elisp
(require 'org-habit)
(add-to-list 'org-modules 'org-habit)
(setq org-agenda-files '("~/Dropbox/org/agenda.org" "~/Dropbox/org/work.org")
      org-habit-graph-column 60
      org-clock-idle-time 15
      org-log-done 'time
      org-log-into-drawer t
      org-agenda-start-with-log-mode t)
#+end_src
*** Todo keywords
#+begin_src elisp
(setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAIT(w)" "|" "DONE(d)" "CANCELLED(c)")
                          (sequence "[ ](T)" "[>](N)" "[?](W)" "|" "[X](D)" "[-](C)")))
(setq org-todo-keyword-faces '(("TODO" . org-warning)
                               ("NEXT" . org-priority)
                               ("WAIT" . org-table)
                               ("DONE" . org-done)
                               ("CANCELLED" . org-distant-deadline)
                               ("[ ]". org-warning)
                               ("[>]" . org-priority)
                               ("[?]" . org-table)
                               ("[X]" . org-done)
                               ("[-]" . org-distant-deadline)))
#+end_src
*** Org-drill
#+begin_src elisp
(use-package org-drill
  :after org)
#+end_src
*** Capture templates
#+begin_src elisp
(setq org-capture-templates
      '(("t" "Personal todo" entry
         (file+headline org-capture-todo-file "Inbox")
         "* [ ] %?\n%i\n%a" :prepend t)
        ("w" "Work" entry
         (file+headline org-capture-work-file "Work")
         "* [ ] %?\n" :prepend t)
        ("j" "Journal" entry
         (file+datetree org-capture-journal-file)
         "* %U %?\n" :prepend t)
        ("n" "Personal notes" entry
         (file+headline org-capture-notes-file "Inbox")
         "* %u %?\n%i\n%a" :prepend t)
        ("r" "Research" entry
         (file+headline org-capture-todo-file "Research")
         "* %u %?\n%i\n%a" :prepend t)
        ("u" "University")
        ("ub" "Bioinformatics" entry
         (file+headline org-capture-todo-file "Bioinformatics")
         "* [ ] %u %? \n%i\n%a" :prepend t)
        ("un" "Natural language processing" entry
         (file+headline org-capture-todo-file "Natural language processing")
         "* [ ] %u %? \n%i\n%a" :prepend t)
        ("d" "Drill")
        ("db" "Bioinformatics" entry
         (file+headline org-drill-file "Bioinformatics")
         "* %u %^{Question} :drill:\n%?\n** The Answer\n %^{Answer}" :prepend t)
        ("dn" "Natural language processing" entry
         (file+headline org-drill-file "Natural language processing")
         "* %u %^{Question} :drill:\n%?\n** The Answer\n %^{Answer}" :prepend t)
        ("p" "Templates for projects")
        ("pi" "Idea" entry
         (file+headline org-capture-todo-file "Project ideas"))
        ("pt" "Project todo" entry
         (file+headline org-capture-todo-file "Project todos")
         "* [ ] %u %?\n%i\n%a" :prepend t)))
#+end_src

*** Pomodoro
[[https://colekillian.com/posts/org-pomodoro-and-polybar/][Source]]
#+begin_src elisp
(use-package org-pomodoro
  :ensure t
  :defer nil
  :commands (org-pomodoro eethern/org-pomodoro-time)
  :config
  (setq alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil))))
  )
(require 'org-pomodoro)

  (defun eethern/org-pomodoro-time ()
    "Return the remaining pomodoro time"
    (if (org-pomodoro-active-p)
        (cl-case org-pomodoro-state
          (:pomodoro
           (format "Pomo: %d minutes - %s" (/ (org-pomodoro-remaining-seconds) 60) org-clock-heading))
          (:short-break
           (format "Short break time: %d minutes" (/ (org-pomodoro-remaining-seconds) 60)))
          (:long-break
           (format "Long break time: %d minutes" (/ (org-pomodoro-remaining-seconds) 60)))
          (:overtime
           (format "Overtime! %d minutes" (/ (org-pomodoro-remaining-seconds) 60))))
      ""))

#+end_src
*** Polybar widget for clock
#+begin_src elisp
(defun eethern/org-clocking-info ()
  (if (org-clock-is-active)
      (format " %d/%d min" 
                      (- (org-clock-get-clocked-time) org-clock-total-time)
                      (org-clock-get-clocked-time))
    ""))
#+end_src
** ipynnb
#+begin_src elisp
(use-package ox-ipynb
  :straight (:host github :repo "jkitchin/ox-ipynb")
  :after ox)
#+end_src
** Babel
*** Code evaluation
I write a lot of notebooks, and develop inside these notebooks. Therefore, allow python evaluation without asking.
#+begin_src elisp
(defun eethern/org-confirm-babel-evaluate (lang body)
  (not (string= lang "python")))  ;don't ask for python

(setq org-confirm-babel-evaluate #'eethern/org-confirm-babel-evaluate)
#+end_src
*** Library of babel
#+begin_src elisp
(with-eval-after-load' org
  (org-babel-lob-ingest "~/Dropbox/org/orbit/templates/lob.org"))
#+end_src
*** Jupyter
Bread and butter for using python in org-mode for notebook style execution.
Make a template for inserting jupyter blocks.
#+begin_src elisp
(use-package jupyter
  :after org
  :defer t
  :config
  (setq org-babel-python-command "~/.pyenv/shims/python")
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:kernel . "python3")
                                                       (:exports . "both")
                                                       (:session . "py")
                                                       (:eval . "never-export")))
  (add-to-list 'org-src-lang-modes '("jupyter-python" . python))
  (add-to-list 'org-structure-template-alist '("ju" . "src jupyter-python"))
  )

;; Had to to this to properly use this function.
;; This is nice to have as it makes github recognize the code blocks as python.
;; Plus, I have no use for normal python blocks anyway
(with-eval-after-load 'ob-jupyter
  (org-babel-jupyter-override-src-block "python"))

#+end_src

*** Babel languages
#+begin_src elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (C . t)
   (jupyter . t)
   (shell . d)))
#+end_src 
*** Auto tangle
Automatically tangle src blocks on save. Makes working with literate programming very nice since code is always up to date in tangled files.
#+begin_src elisp
(use-package org-auto-tangle
  :after org
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default nil))
#+end_src

** Ispell
From [[https://endlessparentheses.com/ispell-and-org-mode.html]]
#+begin_src elisp
(defun endless/org-ispell ()
  "Configure `ispell-skip-region-alist' for `org-mode'."
  (make-local-variable 'ispell-skip-region-alist)
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC")))
(add-hook 'org-mode-hook #'endless/org-ispell)
#+end_src
** Keybindings
#+begin_src elisp
(use-package evil-org
  :after org
  :hook ((org-mode . evil-org-mode)
         (org-agenda-mode . evil-org-mode)))

#+end_src

#+begin_src elisp
;; Graciously stolen from doom emacs
(defun +org--get-foldlevel ()
  (let ((max 1))
    (save-restriction
      (narrow-to-region (window-start) (window-end))
      (save-excursion
        (goto-char (point-min))
        (while (not (eobp))
          (org-next-visible-heading 1)
          (when (outline-invisible-p (line-end-position))
            (let ((level (org-outline-level)))
              (when (> level max)
                (setq max level))))))
      max)))

(defun +org/show-next-fold-level (&optional count)
  "Decrease the fold-level of the visible area of the buffer. This unfolds
    another level of headings on each invocation."
  (interactive "p")
  (let ((new-level (+ (+org--get-foldlevel) (or count 1))))
    (outline-hide-sublevels new-level)
    (message "Folded to level %s" new-level)))

(defun +org/close-all-folds (&optional level)
  "Close all folds in the buffer (or below LEVEL)."
  (interactive "p")
  (outline-hide-sublevels (or level 1)))

(defun +org/open-all-folds (&optional level)
  "Open all folds in the buffer (or up to LEVEL)."
  (interactive "P")
  (if (integerp level)
      (outline-hide-sublevels level)

    (outline-show-all)))

(eethern/local-leader-def
  :states 'normal
  :keymaps 'org-mode-map
  "a c" 'org-download-screenshot
  "a C" 'org-download-named-screenshot
  "k s" 'org-babel-demarcate-block
  "i l" 'org-cdlatex-environment-indent
  "i c" 'org-cite-insert
  "i f" 'org-footnote-new
  "i p" 'academic-phrases
  "i s" 'org-insert-structure-template
  "i P" 'academic-phrases-by-section
  "s n" 'org-toggle-narrow-to-subtree
  "t" 'org-todo
  "d s" 'org-schedule
  "d d" 'org-deadline
  "e" 'org-export-dispatch

  ;; Clocks
  "c -" 'org-clock-timestamps-down
  "c =" 'org-clock-timestamps-up
  "c c" 'org-clock-cancel
  "c e" 'org-clock-modify-effort-esimate
  "c g" 'org-clock-goto
  "c i" 'org-clock-in
  "c l" 'org-clock-in-last
  "c o" 'org-clock-out
  "c R" 'org-clock-report)

(eethern/leader-key-def
  "X" 'org-capture
  "o a /" 'consult-org-agenda
  "o a a" 'org-agenda
  "o a l" 'org-agenda-list

  ;; clocks
  "c g" 'org-clock-goto
  "c c" 'org-clock-cancel
  "c l" 'org-clock-in-last
  "c o" 'org-clock-out)

(general-define-key
 :states 'normal
 "z r" '+org/show-next-fold-level
 "z R" '+org/open-all-folds
 "z i" 'org-toggle-inline-images
 "C-n" 'org-babel-next-src-block
 "C-e" 'org-babel-previous-src-block
 )
#+end_src

* Knowledge management
** Writeroom mode
#+begin_src elisp
(use-package visual-fill-column
  :ensure t)

(use-package writeroom-mode
  :ensure t
  :custom
  (writeroom-restore-window-config t)
  (writeroom-fullscreen-effect 'maximized)
  (writeroom-width 80))

(defun eethern/writing-mode ()
  (interactive)
  (variable-pitch-mode 1)
  (setq buffer-face-mode-face '(:family "Iosevka Aile" :height 150))
  (buffer-face-mode)
  (linum-mode 0)
  (writeroom-mode 1)
  (blink-cursor-mode 1)
  (visual-line-mode 1)
  (display-line-numbers-mode 0)
  (setq truncate-line nil)
  (setq-default line-spacing 5)
  (setq global-hl-line-mode nil))

(eethern/leader-key-def
  :keymaps 'normal
  "t z" '(eethern/writing-mode :wk "Writing mode"))
#+end_src
** Orbit
Personal wiki powered by org roam
#+begin_src elisp
(setq orbit/directory "~/Dropbox/org/orbit"
      orbit/articles-directory (expand-file-name "articles" orbit/directory)
      orbit/assets-directory (expand-file-name "assets" orbit/directory)
      orbit/publish-directory (expand-file-name "public" orbit/directory)
      orbit/templates-directory (expand-file-name "templates" orbit/directory))

(defvar site-attachments
  (regexp-opt '("jpg" "jpeg" "gif" "png" "svg"
                "ico" "cur" "css" "js" "woff" "html" "pdf")))

(setq orbit/html-preamble
      "<div class=\"nav\">
  <ul>
  <li><a href=\"/articles/index.html\">Home</a></li>
  <li><a href=\"/articles/about.html\">About</a></li>
  <li><a href=\"https://github.com/christoffer-arvidsson\">GitHub</a></li>
  </ul>
  </div>")

(defun orbit/sitemap (title list)
  "Site map, as a string.
      TITLE is the title of the site map.  LIST is an internal
      representation for the files to include, as returned by
      `org-list-to-lisp'.  PROJECT is the current project."
  (concat "#+TITLE: " title "\n\n"
          "#+subtitle: Hello" "\n\n"
          (org-list-to-org list)))

(setq orbit/backlinks-section "\n* Backlinks\n:PROPERTIES:\n:CUSTOM_ID: backlinks\n:END:\n\nNotes that link to this note.\n")

(defun orbit/format-tag (tag)
  (if (string= "" tag)
      tag
    (format "=%s=" tag)))

(defun orbit/sitemap-format-entry (entry style project)
  "Default format for site map ENTRY, as a string.
ENTRY is a file name.  STYLE is the style of the sitemap.
PROJECT is the current project."
  (cond ((not (directory-name-p entry))
         (format "[[file:%s][%s]] %s"
                 entry
                 (org-publish-find-title entry project)
                 (mapconcat 'orbit/format-tag (org-publish-find-property entry :filetags project) " ")))
        ((eq style 'tree)
         ;; Return only last subdir.
         (file-name-nondirectory (directory-file-name entry)))
	      (t entry)))

(defun orbit/collect-backlinks-string (backend)
  "Insert backlinks into the end of the org file before parsing it."
  (when (org-export-derived-backend-p backend 'html)
    (when (org-roam-node-at-point)
      (goto-char (point-max))
      ;; Add a new header for the references
      (insert orbit/backlinks-section)
      (let* ((backlinks (org-roam-backlinks-get (org-roam-node-at-point))))
        (dolist (backlink backlinks)
          (let* ((source-node (org-roam-backlink-source-node backlink)))
            (insert
             (format "- [[./%s][%s]]\n"
                     (file-name-nondirectory (org-roam-node-file source-node))
                     (org-roam-node-title source-node)))))))))

(add-hook 'org-export-before-processing-hook 'orbit/collect-backlinks-string)

(setq org-publish-project-alist
      (list
       (list "orbit-articles"
             :auto-sitemap t
             :base-directory orbit/articles-directory
             :base-extension "org"
             :exclude (regexp-opt '("README" "lecture" "draft" "old_notes" "daily" "project"))
             :html-head-extra"<link rel=\"icon\" type=\"image/gif\" href=\"../assets/favicon.gif\"/><link rel=\"stylesheet\" href=\"../assets/css/style.css\" type=\"text/css\"/>"
             :html-preamble orbit/html-preamble
             :html-postamble: nil
             :htmlized-source t
             :publishing-directory (expand-file-name "articles" orbit/publish-directory)
             :publishing-function '(org-html-publish-to-html)
             :recursive t
             :sitemap-file-entry-format "%d *%t*"
             :sitemap-filename "index.org"
             :sitemap-sort-files 'anti-chronologically
             :sitemap-format-entry 'orbit/sitemap-format-entry
             :sitemap-style 'list
             :sitemap-function 'orbit/sitemap
             :sitemap-title "Notes from university"
             :with-toc t
             :html-head-include-default-style nil
             :html-head-include-scripts t)
       (list "orbit-static"
             :base-directory orbit/assets-directory
             :exclude orbit/publish-directory
             :base-extension site-attachments
             :publishing-directory (expand-file-name "assets" orbit/publish-directory)
             :publishing-function 'org-publish-attachment
             :recursive t)
       (list "orbit" :components '("orbit-articles" "orbit-static"))))
#+end_src
** Org roam
#+begin_src elisp
(require 'citar)
(defun eethern/org-roam-node-from-cite (keys-entries)
  (citar-refresh)
  (interactive (list (citar-select-ref :multiple nil :rebuild-cache t)))
  (let ((title (citar--format-entry-no-widths (cdr keys-entries)
                                              "${author editor} :: ${title}")))
    (org-roam-capture- :templates
                       '(("r" "reference" plain "%?" :if-new
                          (file+head "${citekey}.org"
                                     ":PROPERTIES:
:ROAM_REFS: [cite:@${citekey}]
:END:
,#+filetags: :paper:
,#+title: ${title}\n")
                          :immediate-finish t
                          :unnarrowed t))
                       :info (list :citekey (car keys-entries))
                       :node (org-roam-node-create :title title)
                       :props '(:finalize find-file))))

(use-package org-roam
  :after (org citar)
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (file-truename "~/Dropbox/org/orbit/articles"))
  ;; (org-roam-db-location (expand-file-name "org-roam.db" org-roam-directory))
  (+org-roam-open-buffer-on-find-file nil)
  (org-roam-auto-replace-fuzzy-links nil)
  (org-roam-completion-everywhere t)
  (org-roam-db-autosync-mode t)
  ;; (org-roam-node-display-template "${title:96}   ${tags:10}  ${file:48}")
  (org-roam-node-display-template (format "${title:*} %s %s"
                                          (propertize "${tags:10}" 'face 'font-lock-keyword-face)
                                          (propertize "${file:48}" 'face 'org-tag)))
  :config
  (eethern/leader-key-def
    :keymaps 'normal
    "n r" '(:ignore t :wk "Org roam")
    "n r f" '(org-roam-node-find :wk "Find node")
    "n r a" '(org-roam-node-random :wk "Random node")
    "n r s" '(org-roam-db-sync :wk "Sync database")
    "n r c" '(org-roam-capture :wk "Capture note")
    "n r C" '(eethern/org-roam-node-from-cite :wk "Find cite note")
    "n r r" '(org-roam-buffer-toggle :wk "Toggle org roam status buffer")
    "n r i" '(org-roam-node-insert :wk "Insert node"))

  (setq org-roam-capture-templates
        '(("l" "latex")
          ("ld" "temporary note" plain
           (file "~/Dropbox/org/orbit/templates/draft.org")
           :target (file "draft/%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("ll" "lecture note" plain
           (file "~/Dropbox/org/orbit/templates/lecture_note.org")
           :target (file "%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("lp" "permanent note" plain
           (file "~/Dropbox/org/orbit/templates/latex.org")
           :target (file "%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("ln" "notebook" plain
           (file "~/Dropbox/org/orbit/templates/notebook.org")
           :target (file "%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("le" "exercise" plain
           (file "~/Dropbox/org/orbit/templates/exercise.org")
           :target (file "%<%y%m%d%h%m%s>-${slug}.org")
           :unnarrowed t)
          ("p" "project" plain
           (file "~/Dropbox/org/orbit/templates/project.org")
           :target (file "project/${slug}/README.org")
           :unnarrowd t)
          )))

#+end_src
** Org roam ui
#+begin_src elisp
;; (add-to-list 'load-path "~/.emacs.nondoom/private/org-roam-ui")
;; (load-library "org-roam-ui")
(use-package org-roam-ui
  :after org-roam
  :defer t
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start t))
#+end_src
** Hugo
#+begin_src elisp
(use-package ox-hugo
  :ensure t
  :config
  (setq org-hugo-base-dir orbit/directory))
#+end_src
* Development
** Eshell
#+begin_src elisp
(use-package eshell
  :ensure t)

(use-package eshell-toggle
  :after eshell
  :custom
  (eshell-toggle-use-projectile t)
  :config
  (eethern/leader-key-def
    :keymaps 'normal
    "o e" '(eshell-toggle :wk "Toggle eshell")
    ))
#+end_src
** Calc
#+begin_src elisp
(eethern/leader-key-def
  :keymaps 'normal
  "o c" '(quick-calc :wk "Open quick calculator")
  "o C" '(calc :wk "Open full calculator"))
#+end_src
** Projectile
#+begin_src elisp
(use-package projectile
  :config
  (eethern/leader-key-def
    :keymaps 'normal
    "SPC" '(projectile-find-file :wk "Find file in project")
    "p" '(:ignore t :wk "project")
    "p c" '(projectile-compile-project :wk "Compile project")
    "p f" '(projectile-find-file :wk "Find file in project")
    "p r" '(projectile-recentf :wk "Find recent file in project")
    "p p" '(projectile-switch-project :wk "Switch project"))

  (projectile-mode 1))
#+end_src
** Consult
#+begin_src elisp
(use-package consult
  :demand t
  :config
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root)
  (eethern/leader-key-def
    :keymaps 'normal
    "f r" '(consult-recent-file :wk "Recent files")
    "b b" '(consult-buffer :wk "Switch buffer")
    "s i" '(consult-imenu :wk "Jump to symbol")))
#+end_src
** Codebase navigation
#+begin_src elisp
(use-package dumb-jump
    :ensure t
    :custom
    (dumb-jump-prefer-searcher 'rg)
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src

#+begin_src elisp
(use-package rg
    :ensure t
    :config
   (rg-enable-default-bindings))
#+end_src
** Version control
*** Magit
#+begin_src elisp
(use-package magit
  :config
  (eethern/leader-key-def
    :keymaps 'normal
    "g" '(:ignore t :wk "git")
    "g g" '(magit-status :wk "Magit status")))
#+end_src

#+begin_src elisp
(use-package gerrit
  :ensure t
  :custom
  (gerrit-host "gerrit.cicd.autoheim.net")  ;; is needed for REST API calls
  :config
  (progn
    (add-hook 'magit-status-sections-hook #'gerrit-magit-insert-status t))
  (eethern/leader-key-def
    :keymaps 'normal
    "g r" '(:ignore t :wk "review")
    "g r r" '(gerrit-dashboard :wk "Gerrit dashboard")
    "g r u" '(gerrit-upload-transient :wk "Gerrit upload")
    "g r d" '(gerrit-download-transient :wk "Gerrit download")))

  ;; (global-set-key (kbd "C-x i") 'gerrit-upload-transient)
  ;; (global-set-key (kbd "C-x o") 'gerrit-download)))
#+end_src
*** smerge
#+begin_src elisp
(use-package hydra)
(use-package smerge-mode
  :config
  (defhydra scimax-smerge (:color red :hint nil)
    "
Navigate       Keep               other
----------------------------------------
_p_: previous  _c_: current       _e_: ediff
_n_: next      _m_: mine  <<      _u_: undo
_j_: up        _o_: other >>      _r_: refine
_k_: down      _a_: combine       _q_: quit
               _b_: base
"
    ("n" smerge-next)
    ("p" smerge-prev)
    ("c" smerge-keep-current)
    ("m" smerge-keep-mine)
    ("o" smerge-keep-other)
    ("b" smerge-keep-base)
    ("a" smerge-keep-all)
    ("e" smerge-ediff)
    ("j" previous-line)
    ("k" forward-line)
    ("r" smerge-refine)
    ("u" undo)
    ("q" nil :exit t))

  (defun enable-smerge-maybe ()
    (when (and buffer-file-name (vc-backend buffer-file-name))
      (save-excursion
        (goto-char (point-min))
        (when (re-search-forward "^<<<<<<< " nil t)
          (smerge-mode +1)
          (scimax-smerge/body)))))


  (eethern/leader-key-def
    :keymaps 'normal
    "g m" '(scimax-smerge/body :wk "Smerge hydra")))

#+end_src

*** Git gutter
#+begin_src elisp
(use-package git-gutter
  :hook
  (prog-mode . git-gutter-mode)
  (text-mode . git-gutter-mode))
#+end_src
** Syntax checking
*** LSP
#+begin_src elisp
(use-package lsp-mode
  :ensure t
  :commands lsp
  :hook
  ((python-mode cc-mode rust-mode) . lsp)
  (lsp-mode . lsp-enable-which-key-integration)
  :bind (:map lsp-mode-map
              ("TAB" . completion-at-point)
              ("M-RET" . lsp-execute-code-action))
  :custom
  (lsp-headerline-breadcrumb-enable nil)

  ; Rust
  (lsp-rust-server 'rust-analyzer)
  (lsp-rust-analyzer-server-display-inlay-hints t))

(use-package lsp-ui
  :after lsp
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-sideline-enable t)
  (lsp-ui-sideline-show-hover nil)
  (lsp-ui-doc-position 'bottom)
  :config
  (lsp-ui-doc-show))

(use-package company-lsp
  :ensure t
  :config
  (push 'company-lsp company-backends))

(eethern/leader-key-def
  "l"  '(:ignore t :wk "lsp")
  "ld" 'xref-find-definitions
  "lh" 'lsp-describe-thing-at-point
  "lr" 'lsp-rename
  "lR" 'xref-find-references
  "ln" 'lsp-ui-find-next-reference
  "lp" 'lsp-ui-find-prev-reference
  "le" 'lsp-ui-flycheck-list
  "lS" 'lsp-ui-sideline-mode)

#+end_src

*** Flycheck
#+begin_src elisp
(use-package flycheck
  :ensure t
  :defer t
  :hook (lsp-mode . flycheck-mode)
  :init (global-flycheck-mode))
#+end_src
  
*** Tree-sitter
#+begin_src elisp
(use-package tree-sitter
  :ensure t
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs
  :ensure tree-sitter)
#+end_src
** Snippets
#+begin_src elisp
(use-package yasnippet
  :ensure t
  :hook (lsp-mode . yas-minor-mode)
  :config
  (yas-global-mode 1))

(use-package yasnippet-snippets
  :ensure yasnippet)

(eethern/leader-key-def
  "i s" 'yas-insert-snippet)
#+end_src
** Very large files
Asks to open large files in chunks when opening a large
file. Scrolling past chunks opens the next chunk. [[https://github.com/m00natic/vlfi][vlfi]]
#+begin_src elisp
(use-package vlf
  :ensure t
  :config
  (require 'vlf-setup))
#+end_src
** Languages
*** Python
#+begin_src elisp
(use-package python
  :defer t
  :custom
  (python-indent-offset 4)
  :config
  (setenv "PYTHONPATH" "/home/s0001520/repos/madame-web"))

(use-package anaconda-mode
  :defer t
  :hook ((python-mode . anaconda-mode)
         (python-mode . anaconda-eldoc-mode))
  :config
  (add-to-list 'company-backends 'company-anaconda)
  (add-to-list 'python-shell-extra-pythonpaths "~/repos/madame_web"))

(use-package lsp-jedi
  :ensure t
  :defer t
  :config
  (setq lsp-pyls-plugins-pycodestyle-max-line-length 100)
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls)
    (add-to-list 'lsp-enabled-clients 'jedi)))

;; Handle different python versions
(use-package pyenv-mode
  :ensure t
  :defer t
  :config
  (pyenv-mode))

;; Remove unused imports on save
(use-package pyimport
  :ensure t
  :config
  (add-hook 'before-save-hook 'pyimport-remove-unused))

;; Sort imports on save
(use-package py-isort
  :ensure t
  :config
  (add-hook 'before-save-hook 'py-isort-before-save))

;; Handle venvs
(use-package pyvenv
  :config
  (pyvenv-mode 1))

;; Format buffer on save
(use-package python-black
  :demand t
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))
#+end_src

#+begin_src elisp
(eethern/local-leader-def
  :states '(normal visual)
  :keymaps 'python-mode-map
  "r" 'run-python
  "c" 'python-shell-send-buffer
  "f" 'python-shell-send-defun
  "v" 'python-shell-send-region)
#+end_src
*** C/C++
#+begin_src elisp
(use-package ccls
  :hook ((c-mode c++-mode objc-mode cuda-mode) .
         (lambda () (require 'ccls) (lsp))))
#+end_src

#+begin_src elisp
(use-package cc-mode
  :config 
  (setq c-tab-always-indent t)
  (setq-default c-basic-offset 4)
  (c-add-style
   "doom" '((c-comment-only-line-offset . 0)
            (c-hanging-braces-alist (brace-list-open)
                                    (brace-entry-open)
                                    (substatement-open after)
                                    (block-close . c-snug-do-while)
                                    (arglist-cont-nonempty))
            (c-cleanup-list brace-else-brace)
            (c-offsets-alist
             (knr-argdecl-intro . 0)
             (substatement-open . 0)
             (substatement-label . 0)
             (statement-cont . +)
             (case-label . +)
             ;; align args with open brace OR don't indent at all (if open
             ;; brace is at eolp and close brace is after arg with no trailing
             ;; comma)
             (brace-list-intro . 0)
             (brace-list-close . -)
             (arglist-intro . +)
             (arglist-close +cc-lineup-arglist-close 0)
             ;; don't over-indent lambda blocks
             (inline-open . 0)
             (inlambda . 0)
             ;; indent access keywords +1 level, and properties beneath them
             ;; another level
             (access-label . -)
             (inclass +cc-c++-lineup-inclass +)
             (label . 0))))

  (when (listp c-default-style)
    (setf (alist-get 'other c-default-style) "doom"))
  )
#+end_src
*** Cuda
#+begin_src elisp
(use-package cuda-mode
  :ensure t
  :config
  (setq auto-mode-alist
        (cons '("\\.cu$" . cuda-mode) auto-mode-alist)))
#+end_src
*** Matlab/octave
#+begin_src elisp
(use-package octave
  :defer t
  :config
  (setq auto-mode-alist
        (cons '("\\.m$" . octave-mode) auto-mode-alist))

  (add-hook 'octave-mode-hook
            (lambda ()
              (abbrev-mode 1)
              (auto-fill-mode 1)
              (if (eq window-system 'x)
                  (font-lock-mode 1))))
  (add-hook 'octave-mode-hook (lambda () (auto-fill-mode 0)))

  (eethern/leader-key-def
    :keymaps 'matlab-mode-map
    "m c" 'octave-send-buffer
    "m r" 'run-octave))

;; (use-package matlab-mode
;;   :ensure t
;;   :config
;;   (add-to-list 'auto-mode-alist '("\\.m$" . matlab-mode))
;;   (setq matlab-indent-function t
;;         matlab-shell-command "matlab")
;;   (eethern/leader-key-def
;;     :keymaps 'matlab-mode-map
;;     "m c" 'matlab-shell-run-cell
;;     "m r" 'matlab-shell))

#+end_src
*** Rust
#+begin_src elisp
(use-package rustic
  :ensure t)
#+end_src

#+begin_src elisp
(eethern/local-leader-def
  :states '(normal visual)
  :keymaps 'rust-mode-map
  "r" 'rustic-cargo-run
  "b" 'rustic-cargo-build
  "c" 'rustic-compile
  "l" 'rustic-cargo-clippy
  "t" 'rustic-cargo-current-test
  "T" 'rustic-cargo-test
  "p a" 'rustic-cargo-add
  "p n" 'rustic-cargo-new
  "p u" 'rustic-cargo-upgrade
  "F" 'rustic-format-buffer)
#+end_src

*** Yaml
#+begin_src elisp
(use-package yaml-mode
  :ensure t)
#+end_src

*** Typescript
#+begin_src elisp
(use-package typescript-mode
  :ensure t
  :custom
  (typescript-indent-level 2)
  (js-indent-level 2)
  :config
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . js-jsx-mode)))
#+end_src
  
** Debugging
#+begin_src elisp
(use-package realgud
  :ensure t)

(use-package dap-mode
  :ensure t :after lsp-mode
  :config
  (require 'dap-python)
  (require 'dap-ui)
  (setq dap-python-debugger 'debugpy)
  (setq dap-auto-configure-features '(sessions locals controls tooltip))
  (add-hook 'dap-stopped-hook
          (lambda (arg) (call-interactively #'dap-hydra)))
  (dap-register-debug-template "Patch selection"
    (list :type "python"
          :args (list "configs/embed_small.yaml")
          :cwd nil
          :env '(("DEBUG" . "1") ("CUDA_LAUNCH_BLOCKING" . "1"))
          :target-module (expand-file-name "~/repos/madame-web/projects/master_theses/thesis_patch_similarity_search/construct_index.py")
          :request "launch"
          :name "batch_patch"))

  (dap-mode t)
  (dap-ui-mode t)
  (dap-tooltip-mode t)
  (tooltip-mode t)
  (eethern/leader-key-def
    :keymaps 'normal
    "o d" '(dap-debug :wk "Open debugger")
    ))
  #+end_src
* Runtime performance
#+begin_src elisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src



