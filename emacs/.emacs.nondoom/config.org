#+title: Emacs config
#+startup: overview
#+property: header-args:elisp :tangle ~/.emacs.nondoom/init.el :cache no :results silent :padline no
#+property: header-args:emacs-lisp :tangle ~/.emacs.nondoom/init.el :cache no :results silent :padline no
#+auto_tangle: t

* Startup performance
** Lexical binding
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

** Startup time
#+begin_src elisp
(setq gc-cons-threshold (* 50 1000 1000))
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

* Native compilation
#+begin_src elisp
;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)

;; Set the right directory to store the native comp cache
(add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
#+end_src

* Package management
** Archives
#+begin_src elisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

** Straight
Use straight.el

#+begin_src elisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(straight-use-package '(org :local-repo nil))

#+end_src

* General Configuration
** Personal information
#+begin_src elisp
(setq user-full-name "Christoffer Arvidsson"
      user-mail-address "christoffer@arvidson.nu")
#+end_src
** User Interface
Hide ugly gui elements.
#+begin_src elisp
(defun my/disable-scroll-bars (frame)
  (modify-frame-parameters frame
                           '((vertical-scroll-bars . nil)
                             (horizontal-scroll-bars . nil))))
(add-hook 'after-make-frame-functions 'my/disable-scroll-bars)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 5)
(menu-bar-mode -1)
(setq-default display-line-numbers-width 3)
(setq visible-bell t)
#+end_src

Line numbers.
#+begin_src elisp
(column-number-mode)
(setq display-line-numbers-type 'relative)

(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+end_src

** Theme
#+begin_src elisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
        doom-horizon-brighter-comments t
        doom-horizon-comment-bg nil)

  (load-theme 'doom-horizon t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+end_src

** Font
Set the fonts.
#+begin_src elisp

(set-face-attribute 'default nil
                    :font "iosevka"
                    :weight 'normal
                    :height 120)

(set-face-attribute 'fixed-pitch nil
                    :font "iosevka"
                    :weight 'normal
                    :height 120)

(set-face-attribute 'variable-pitch nil
                    :font "Iosevka Aile"
                    :weight 'light
                    :height 120)

;; Required so that emacs client changes font
(setq default-frame-alist '((font . "iosevka")))
#+end_src

** Home buffer
I will make this use some kind of dashboard. For now, it's just an org file.
#+begin_src elisp
(defun my/dashboard-banner ()
  """Set a dashboard banner including information on package initialization
       time and garbage collections."""
  (setq dashboard-banner-logo-title
        (format "Emacs ready in %.2f seconds with %d garbage collections."
                (float-time (time-subtract after-init-time before-init-time)) gcs-done)))

(use-package dashboard
  :init
  (add-hook 'after-init-hook 'dashboard-refresh-buffer)
  (add-hook 'dashboard-mode-hook 'my/dashboard-banner)
  :config
  (setq dashboard-startup-banner 'logo)
  (dashboard-setup-startup-hook))

;; Makes emacsclient default to the dashboard
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
** Default applications
#+begin_src elisp
(setq browse-url-browser-function 'browse-url-firefox)
#+end_src
** Icons
#+begin_src elisp
(use-package all-the-icons)
#+end_src
** Modeline
#+begin_src elisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-height 15)
  (doom-modeline-window-width-limit fill-column)
  (doom-modeline-lsp t)
  (doom-modeline-github nil)
  (doom-modeline-env-enable-python t)
  (doom-modeline-minor-modes nil)
  (doom-modeline-persp-name t)
  (doom-modeline-project-detection 'auto)
  (doom-modeline-icon (display-graphic-p))
  (doom-modeline-buffer-file-name-style 'truncate-except-project))
#+end_src
* Editor
** General settings
*** Tab width
#+begin_src elisp
(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)
#+end_src
*** Spaces > tabs
#+begin_src elisp
(setq-default indent-tabs-mode nil)
#+end_src

** General leader key
#+begin_src elisp
(use-package general
  :config
  (general-evil-setup t)

  (general-create-definer eethern/leader-key-def
    :keymaps '(normal visual emacs)
    :prefix "SPC")

  (general-create-definer eethern/local-leader-def
    :keymaps '(normal visual emacs)
    :prefix "SPC m")

  (general-create-definer eethern/ctrl-c-keys
    :prefix "C-c")

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (eethern/leader-key-def
    :keymaps 'normal
    "" '(nil :wk "Leader")
    "<escape>" 'keyboard-escape-quit
    "o" '(:ignore t :wk "open")
    "q" '(:ignore t :wk "quit")
    "q r" '(restart-emacs :wk "Restart emacs")
    "q q" '(quit-window :wk "Quit emacs"))
  )
#+end_src

** Evil
#+begin_src elisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-want-C-i-jump nil
        evil-want-Y-yank-to-eol t
        evil-respect-visual-line-mode t)
  :config
  (evil-mode 1))
#+end_src
*** Evil collection
#+begin_src elisp
(use-package evil-collection
  :after evil
  :init
  :custom
  (evil-collection-outline-bind-tab-p nil)
  :config
  (delete 'lispy evil-collection-mode-list)
  (delete 'org-present evil-collection-mode-list)
  (evil-collection-init)
  )
#+end_src

** Which-key
#+begin_src elisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

** Nerd-commenter
#+begin_src elisp
(use-package evil-nerd-commenter
  :config
  (general-define-key
   :states 'normal
   "g c" '(evilnc-comment-operator :wk "Comment operator")))
#+end_src

** Completion
*** Vertical completion
#+begin_src elisp
(use-package vertico
  :config
  (setq vertico-cycle t)
  (vertico-mode))
#+end_src

*** Orderless
#+begin_src elisp
(defun just-one-face (fn &rest args)
  (let ((orderless-match-faces [completions-common-part]))
    (apply fn args)))

(use-package orderless
  :after company
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion))))
  (orderless-component-separator "[ &]")
  :config
  (advice-add 'company-capf--candidates :around #'just-one-face))
#+end_src

*** Marginalia
#+begin_src elisp
(use-package marginalia
  :init
  (marginalia-mode))
#+end_src
*** Persist history
#+begin_src elisp
(use-package savehist
  :config
  (savehist-mode))
#+end_src

*** Some useful emacs settings
#+begin_src elisp
(use-package emacs
  :config
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src
*** Company
#+begin_src elisp
(use-package company
  :custom
  (company-minimum-prefix-length 3)
  (completion-ignore-case t)
  (company-idle-delay 0.2)
  :hook (after-init . global-company-mode)
  :config
  (add-to-list 'company-backends 'company-capf))
#+end_src
** Expand region
#+begin_src elisp
(use-package expand-region
  :config
  (eethern/leader-key-def
    :keymaps 'normal
    "v" '(er/expand-region :wk "Expand region")))
#+end_src

** Rainbow delimiters
#+begin_src elisp
(use-package rainbow-delimiters
  :ghook 'prog-mode-hook)
#+end_src

** Smartparens
#+begin_src elisp
(use-package smartparens
  :config
  (smartparens-global-mode))
#+end_src
** Evil snipe
#+begin_src elisp
(use-package evil-snipe
  :ensure t
  :config
  (evil-snipe-mode +1))
#+end_src
** Avy
#+begin_src elisp
(use-package avy
  :config
  (general-define-key
   :states 'normal
   "g s s" 'evil-avy-goto-char-2
   "g s e" 'evil-avy-goto-char-2-above
   "g s n" 'evil-avy-goto-char-2-below
   ))
#+end_src
** iedit
#+begin_src elisp
(use-package iedit
  :ensure t)
#+end_src
* Navigation
** Windows

#+begin_src elisp
(defun +evil/window-move-left ()
  "Swap windows to the left."
  (interactive) (+evil--window-swap 'left))
(defun +evil/window-move-right ()
  "Swap windows to the right"
  (interactive) (+evil--window-swap 'right))
(defun +evil/window-move-up ()
  "Swap windows upward."
  (interactive) (+evil--window-swap 'up))
(defun +evil/window-move-down ()
  "Swap windows downward."
  (interactive) (+evil--window-swap 'down))

(eethern/leader-key-def
  :keymaps 'normal
  "TAB" '(evil-switch-to-windows-last-buffer :wk "Previous buffer")
  "w" '(nil :wk "window")
  "w m" '(evil-window-left :wk "Select window left")
  "w n" '(evil-window-down :wk "Select window down")
  "w e" '(evil-window-up :wk "Select window up")
  "w i" '(evil-window-right :wk "Select window right")
  "w M" '(+evil/window-move-left :wk "Move window left")
  "w N" '(+evil/window-move-down :wk "Move window down")
  "w E" '(+evil/window-move-up :wk "Move window up")
  "w I" '(+evil/window-move-right :wk "Move window right")
  "w v" '(evil-window-vsplit :wk "Vertical window split")
  "w s" '(evil-window-split :wk "Horizontal window split")
  "w q" '(evil-quit :wk "Evil quit")
  "w =" '(balance-windows :wk "Balance windows")
  )

#+end_src

* File and buffer
** Delete current file
[[https://kundeveloper.com/blog/buffer-files/][Source]]

#+begin_src elisp
(defun eethern/delete-current-buffer-file ()
  "Removes file connected to current buffer and kills buffer."
  (interactive)
  (let ((filename (buffer-file-name))
        (buffer (current-buffer))
        (name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
        (ido-kill-buffer)
      (when (yes-or-no-p "Are you sure you want to remove this file? ")
        (delete-file filename)
        (kill-buffer buffer)
        (message "File '%s' successfully removed" filename)))))

(defun eethern/rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
#+end_src
** Yes or no
Make "write yes/no" prompts into "press y/n" instead.
#+begin_src elisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Recentf
Track recent files.
#+begin_src elisp
(recentf-mode)
#+end_src

** Noo junk please we are unix
This will remove those pesky line-endings mac users seem blind to.
#+begin_src elisp
(defun no-junk-please-were-unixish ()
  (let ((coding-str (symbol-name buffer-file-coding-system)))
    (when (string-match "-\\(?:dos\\|mac\\)$" coding-str)
      (set-buffer-file-coding-system 'unix))))

(add-hook 'find-file-hooks 'no-junk-please-were-unixish)
#+end_src

** Backup files
#+begin_src elisp
(setq backup-directory-alist '(("." . "~/.emacsbackups"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      )

#+end_src
** Yank current file path
Stolen from doom emacs
#+begin_src elisp
(defun doom/yank-buffer-path (&optional root)
  "Copy the current buffer's path to the kill ring."
  (interactive)
  (if-let (filename (or (buffer-file-name (buffer-base-buffer))
                        (bound-and-true-p list-buffers-directory)))
      (message "Copied path to clipboard: %s"
               (kill-new (abbreviate-file-name
                          (if root
                              (file-relative-name filename root)
                            filename))))
    (error "Couldn't find filename in current buffer")))
#+end_src
** Keybindings

#+begin_src elisp
(eethern/leader-key-def
  :keymaps 'normal
  "f" '(:ignore t :wk "file")
  "f f" '(find-file :wk "Find file")
  "f s" '(save-buffer :wk "Save buffer")
  "f p" '(find-file user-emacs-directory :wk "Find emacs config file")
  "f y" '(doom/yank-buffer-path :wk "Yank buffer path")
  "f S" '(write-file :wk "Save buffer as...")
  "f D" '(eethern/delete-current-buffer-file :wk "Delete current file")
  "f R" '(eethern/rename-current-buffer-file :wk "Move current file")
  "b" '(:ignore t :wk "buffer")
  "b s" '(save-buffer :wk "Save buffer")
  "b r" '(revert-buffer :wk "Revert buffer")
  "b d" '(kill-this-buffer :wk "Kill current buffer")
  )
#+end_src

* Org mode
** Org configuration
#+begin_src elisp
(defun eethern/org-mode-setup ()
  (org-indent-mode)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil)
  
  (set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.0)
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'bold :height (cdr face)))

  (require 'org-indent)
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  (set-face-attribute 'org-column nil :background nil)
  (set-face-attribute 'org-column-title nil :background nil))

(use-package org
  :ensure org-plus-contrib
  :hook 'eethern/org-mode-setup
  (org-babel-after-execute . org-redisplay-inline-images)
  (org-mode . turn-on-flyspell)
  :config
  (setq org-directory (file-truename "~/Dropbox/org/")
        org-capture-todo-file (file-truename "~/Dropbox/org/agenda.org")
        org-drill-file (file-truename "~/Dropbox/org/drill.org")
        org-id-locations-file (file-truename "~/Dropbox/org/orbit/.orgids")
        org-id-track-globally t ;; Trach org ids globally for org-roam
        org-pretty-entities nil
        org-hide-emphasis-markers t
        org-startup-with-inline-images "inlineimages"
        org-return-follows-link  t
        org-startup-indented t
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t
        org-image-actual-width nil
        org-latex-prefer-user-labels t
        org-src-fontify-natively t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t
        org-export-use-babel t
        org-indent-mode t
        org-edit-src-content-indentation 2
        org-startup-truncated nil) ;; Force org to not truncate lines

  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)
          ("\\.pdf\\'" . "zathura %s")
          ("\\.png\\'" . viewnior)
          ("\\.jpg\\'" . viewnior)
          ("\\.svg\\'" . viewnior))))
  
#+end_src

** Visuals
*** Superstar
#+begin_src elisp
(use-package org-superstar
  :after org
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-hide-leading-stars nil)
  (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
  (org-superstar-leading-bullet ?\s)
  (org-indent-mode-turns-on-hiding-stars nil))
#+end_src

*** Fancy priorities
#+begin_src elisp
(use-package org-fancy-priorities
  :ensure t
  :after org
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕")))
#+end_src
*** Writeroom-mode
#+begin_src elisp
(use-package visual-fill-column
  :ensure t)

(use-package writeroom-mode
  :after visual-fill-column)
#+end_src
** Block templates
#+begin_src elisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("el" . "src elisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("as" . "aside"))
(add-to-list 'org-structure-template-alist '("al" . "algorithm"))
(add-to-list 'org-structure-template-alist '("pr" . "proof"))
(add-to-list 'org-structure-template-alist '("th" . "theorem"))
(add-to-list 'org-structure-template-alist '("cs" . "columns"))
(add-to-list 'org-structure-template-alist '("co" . "column"))

(add-to-list 'org-tempo-keywords-alist '("on" . "name"))
(add-to-list 'org-tempo-keywords-alist '("oc" . "caption"))
(add-to-list 'org-tempo-keywords-alist '("oo" . "attr_org"))
(add-to-list 'org-tempo-keywords-alist '("ol" . "attr_latex"))
#+end_src

** Org download
#+begin_src elisp
(defun org-download-named-screenshot (fname)
  (interactive "FEnter Filename:")
  (make-directory (file-name-directory fname) t)
  (if (functionp org-download-screenshot-method)
      (funcall org-download-screenshot-method fname)
    (shell-command-to-string
     (format org-download-screenshot-method fname)))
  (org-download-image fname))

(use-package org-download
  :after org
  :config
  (setq org-download-screenshot-method "xfce4-screenshooter -r -o cat > %s"
        org-download-method 'directory
        org-download-timestamp "%Y-%m-%d_%H-%M-%S_")
  (setq-default org-download-image-dir "../assets/images"
                org-download-heading-lvl nil))

#+end_src
** Latex
*** Auctex
#+begin_src elisp
(use-package auctex
  :straight (:type git :host nil :repo "https://git.savannah.gnu.org/git/auctex.git"
                   :pre-build ((shell-command "./autogen.sh && ./configure --without-texmf-dir --with-lispdir=. && make")))
  :mode
                                        ; https://www.mail-archive.com/auctex@gnu.org/msg07608.html
                                        ; https://www.gnu.org/software/emacs/manual/html_node/reftex/Installation.html
  ("\\.tex\\'" . latex-mode) ; Must first activate the inferior Emacs latex mode
  :hook
  (LaTeX-mode . TeX-PDF-mode)
  (LaTeX-mode . company-mode)
  (LaTeX-mode . flyspell-mode)
  (LaTeX-mode . flycheck-mode)
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . turn-on-reftex)
  (LaTeX-mode . turn-on-cdlatex)
  :init
  (load "auctex.el" nil t t) 
  ;; (load "preview-latex.el" nil t t)
  (require 'reftex) 

  (setq-default TeX-master 'dwim)

  (setq TeX-data-directory (straight--repos-dir "auctex")
        TeX-lisp-directory TeX-data-directory                   

                                        ; Or custom-set-variables as follows.
                                        ; M-x describe-variable RET preview-TeX-style-dir RET
                                        ;`(preview-TeX-style-dir ,(concat ".:" (straight--repos-dir "auctex") "latex:"))
        preview-TeX-style-dir (concat ".:" (straight--repos-dir "auctex") "latex:")

        TeX-parse-self t ; parse on load
        TeX-auto-save t  ; parse on save
        TeX-auto-untabify t ; Automatically remove all tabs from a file before saving it. 

                                        ;Type of TeX engine to use.
                                        ;It should be one of the following symbols:
                                        ;* ‘default’
                                        ;* ‘luatex’
                                        ;* ‘omega’
                                        ;* ‘xetex’
        TeX-engine 'xetex
        TeX-auto-local ".auctex-auto" ; Directory containing automatically generated TeX information.
        TeX-style-local ".auctex-style" ; Directory containing hand generated TeX information.

        ;; ##### Enable synctex correlation. 
        ;; ##### From Okular just press `Shift + Left click' to go to the good line. 
        ;; ##### From Evince just press `Ctrl + Left click' to go to the good line.      
        TeX-source-correlate-mode t
        TeX-source-correlate-method 'synctex
        TeX-source-correlate-start-server t

        ;; automatically insert braces after sub/superscript in math mode
        TeX-electric-sub-and-superscript t 
        ;; If non-nil, then query the user before saving each file with TeX-save-document.  
        TeX-save-query nil

        TeX-view-program-selection '((output-pdf "PDF Tools"))
        ))
#+end_src

*** cdlatex
#+begin_src elisp
(use-package cdlatex
  :ensure auctex
  :hook (org-mode . org-cdlatex-mode))
#+end_src

*** Org fragtog
#+begin_src elisp
(defun update-org-latex-fragment-scale ()
  (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
    (plist-put org-format-latex-options :scale (* 1.8 text-scale-factor))))

(use-package org-fragtog
  :ensure t
  :config
  (add-hook 'org-mode-hook 'org-fragtog-mode)
  (add-hook 'org-mode-hook 'update-org-latex-fragment-scale)
  (setq org-fragtog-ignore-predicates '(org-at-table-p)))
#+end_src
*** Minted
#+begin_src elisp
(with-eval-after-load 'org
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
  (setq org-src-fontify-natively t))
#+end_src
** Productivity
*** Agenda settings
#+begin_src elisp
(setq org-agenda-files (list (file-truename "~/Dropbox/org/agenda.org"))
      org-agenda-time-grid '((daily today require-timed) "----------------------" nil)
      org-agenda-skip-scheduled-if-done nil
      org-agenda-skip-deadline-if-done nil
      org-agenda-include-deadlines t
      org-agenda-include-diary t
      org-agenda-block-separator t
      org-agenda-compact-blocks t
      org-agenda-start-with-log-mode t)

#+end_src
*** Super agenda
#+begin_src elisp
(use-package org-super-agenda
  :ensure t
  :defer t
  :config
  (setq org-super-agenda-groups
       '(;; Each group has an implicit boolean OR operator between its selectors.
         (:name "Today"  ; Optionally specify section name
                :time-grid t  ; Items that appear on the time grid
                :todo "TODAY")  ; Items that have this TODO keyword
         (:name "University"
                :tag "uni"
                :todo "TODO"
                :time-grid t
                :priority "A")
         ))
  (org-super-agenda-mode 1))
#+end_src
*** Todo keywords
#+begin_src elisp
(setq org-todo-keywords '((sequence "TODO(t)" "PROJ(p)" "LOOP(r)" "STRT(s)" "WAIT(w)" "HOLD(h)" "IDEA(i)" "|" "DONE(d)" "KILL(k)")
                          (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
                          (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")))
#+end_src
*** Org-drill
#+begin_src elisp
(use-package org-drill
  :after org)
#+end_src
*** Capture templates
#+begin_src elisp
(setq org-capture-templates
      '(("t" "Personal todo" entry
         (file+headline org-capture-todo-file "Inbox")
         "* [ ] %?\n%i\n%a" :prepend t)
        ("j" "Journal" entry
         (file+datetree org-capture-journal-file)
         "* %U %?\n" :prepend t)
        ("n" "Personal notes" entry
         (file+headline org-capture-notes-file "Inbox")
         "* %u %?\n%i\n%a" :prepend t)
        ("r" "Research" entry
         (file+headline org-capture-todo-file "Research")
         "* %u %?\n%i\n%a" :prepend t)
        ("u" "University")
        ("ub" "Bioinformatics" entry
         (file+headline org-capture-todo-file "Bioinformatics")
         "* [ ] %u %? \n%i\n%a" :prepend t)
        ("un" "Natural language processing" entry
         (file+headline org-capture-todo-file "Natural language processing")
         "* [ ] %u %? \n%i\n%a" :prepend t)
        ("d" "Drill")
        ("db" "Bioinformatics" entry
         (file+headline org-drill-file "Bioinformatics")
         "* %u %^{Question} :drill:\n%?\n** The Answer\n %^{Answer}" :prepend t)
        ("dn" "Natural language processing" entry
         (file+headline org-drill-file "Natural language processing")
         "* %u %^{Question} :drill:\n%?\n** The Answer\n %^{Answer}" :prepend t)
        ("p" "Templates for projects")
        ("pi" "Idea" entry
         (file+headline org-capture-todo-file "Project ideas")
         "* %u %?\n%i\n%a" :prepend t)))
#+end_src

*** Pomodoro
[[https://colekillian.com/posts/org-pomodoro-and-polybar/][Source]]
#+begin_src elisp
(use-package org-pomodoro
  :ensure t
  :defer nil
  :commands (org-pomodoro eethern/org-pomodoro-time)
  :config
  (setq alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil))))
  )
(require 'org-pomodoro)

  (defun eethern/org-pomodoro-time ()
    "Return the remaining pomodoro time"
    (if (org-pomodoro-active-p)
        (cl-case org-pomodoro-state
          (:pomodoro
           (format "Pomo: %d minutes - %s" (/ (org-pomodoro-remaining-seconds) 60) org-clock-heading))
          (:short-break
           (format "Short break time: %d minutes" (/ (org-pomodoro-remaining-seconds) 60)))
          (:long-break
           (format "Long break time: %d minutes" (/ (org-pomodoro-remaining-seconds) 60)))
          (:overtime
           (format "Overtime! %d minutes" (/ (org-pomodoro-remaining-seconds) 60))))
      ""))

#+end_src
** Babel
*** Library of babel
#+begin_src elisp
(org-babel-lob-ingest "~/Dropbox/org/orbit/templates/lob.org")
#+end_src
*** Jupyter
Bread and butter for using python in org-mode for notebook style execution.
Make a template for inserting jupyter blocks.
#+begin_src elisp
(use-package jupyter
  :after org
  :defer t
  :config
  (setq org-babel-python-command "~/.pyenv/shims/python")
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:kernel . "python3")
                                                       (:exports . "both")
                                                       (:session . "py")
                                                       (:eval . "never-export")))
  (add-to-list 'org-src-lang-modes '("jupyter-python" . python))
  (add-to-list 'org-structure-template-alist '("ju" . "src jupyter-python"))
  )

;; Had to to this to properly use this function.
;; This is nice to have as it makes github recognize the code blocks as python.
;; Plus, I have no use for normal python blocks anyway
(with-eval-after-load 'ob-jupyter
  (org-babel-jupyter-override-src-block "python"))

#+end_src
*** Babel languages
#+begin_src elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (jupyter . t)))
#+end_src 
*** Auto tangle
Automatically tangle src blocks on save. Makes working with literate programming very nice since code is always up to date in tangled files.
#+begin_src elisp
(use-package org-auto-tangle
  :after org
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default nil))
#+end_src

** Ispell
From [[https://endlessparentheses.com/ispell-and-org-mode.html]]
#+begin_src elisp
(defun endless/org-ispell ()
  "Configure `ispell-skip-region-alist' for `org-mode'."
  (make-local-variable 'ispell-skip-region-alist)
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC")))
(add-hook 'org-mode-hook #'endless/org-ispell)
#+end_src
** Keybindings
#+begin_src elisp
(use-package evil-org
  :after org
  :hook ((org-mode . evil-org-mode)
         (org-agenda-mode . evil-org-mode)))

#+end_src

#+begin_src elisp
;; Graciously stolen from doom emacs
(defun +org--get-foldlevel ()
  (let ((max 1))
    (save-restriction
      (narrow-to-region (window-start) (window-end))
      (save-excursion
        (goto-char (point-min))
        (while (not (eobp))
          (org-next-visible-heading 1)
          (when (outline-invisible-p (line-end-position))
            (let ((level (org-outline-level)))
              (when (> level max)
                (setq max level))))))
      max)))

(defun +org/show-next-fold-level (&optional count)
  "Decrease the fold-level of the visible area of the buffer. This unfolds
    another level of headings on each invocation."
  (interactive "p")
  (let ((new-level (+ (+org--get-foldlevel) (or count 1))))
    (outline-hide-sublevels new-level)
    (message "Folded to level %s" new-level)))

(defun +org/close-all-folds (&optional level)
  "Close all folds in the buffer (or below LEVEL)."
  (interactive "p")
  (outline-hide-sublevels (or level 1)))

(defun +org/open-all-folds (&optional level)
  "Open all folds in the buffer (or up to LEVEL)."
  (interactive "P")
  (if (integerp level)
      (outline-hide-sublevels level)

    (outline-show-all)))

(eethern/local-leader-def
  :states 'normal
  :keymaps 'org-mode-map
  "a c" 'org-download-screenshot
  "a C" 'org-download-named-screenshot
  "k s" 'org-babel-demarcate-block
  "i l" 'org-cdlatex-environment-indent
  "i p" 'academic-phrases
  "i s" 'org-insert-structure-template
  "i P" 'academic-phrases-by-section
  "t" 'org-todo
  "d s" 'org-schedule
  "d d" 'org-deadline
  "e" 'org-export-dispatch)

(eethern/leader-key-def
  "X" 'org-capture
  "o a a" 'org-agenda)

(general-define-key
 :states 'normal
 "z r" '+org/show-next-fold-level
 "z R" '+org/open-all-folds
 "z i" 'org-toggle-inline-images
 "C-n" 'org-babel-next-src-block
 "C-e" 'org-babel-previous-src-block
 )
#+end_src

* Knowledge management
** Orbit
Personal wiki powered by org roam
#+begin_src elisp
(setq orbit/directory "~/Dropbox/org/orbit"
      orbit/articles-directory (expand-file-name "articles" orbit/directory)
      orbit/assets-directory (expand-file-name "assets" orbit/directory)
      orbit/publish-directory (expand-file-name "public" orbit/directory)
      orbit/templates-directory (expand-file-name "templates" orbit/directory))

(defvar site-attachments
  (regexp-opt '("jpg" "jpeg" "gif" "png" "svg"
                "ico" "cur" "css" "js" "woff" "html" "pdf")))

(setq orbit/html-preamble
      "<div class=\"nav\">
  <ul>
  <li><a href=\"/articles/index.html\">Home</a></li>
  <li><a href=\"/articles/about.html\">About</a></li>
  <li><a href=\"https://github.com/christoffer-arvidsson\">GitHub</a></li>
  </ul>
  </div>")

(defun orbit/sitemap (title list)
  "Site map, as a string.
      TITLE is the title of the site map.  LIST is an internal
      representation for the files to include, as returned by
      `org-list-to-lisp'.  PROJECT is the current project."
  (concat "#+TITLE: " title "\n\n"
          "#+subtitle: Hello" "\n\n"
          (org-list-to-org list)))

(defun orbit/sitemap-file-entry-format ()
  "%")

(setq orbit/backlinks-section "\n* Backlinks\n:PROPERTIES:\n:CUSTOM_ID: backlinks\n:END:\n\nNotes that link to this note.\n")

(defun orbit/collect-backlinks-string (backend)
  "Insert backlinks into the end of the org file before parsing it."
  (when (org-roam-node-at-point)
    (goto-char (point-max))
    ;; Add a new header for the references
    (insert orbit/backlinks-section)
    (let* ((backlinks (org-roam-backlinks-get (org-roam-node-at-point))))
      (dolist (backlink backlinks)
        (let* ((source-node (org-roam-backlink-source-node backlink)))
          (insert
           (format "- [[./%s][%s]]\n"
                   (file-name-nondirectory (org-roam-node-file source-node))
                   (org-roam-node-title source-node))))))))

(add-hook 'org-export-before-processing-hook 'orbit/collect-backlinks-string)

(setq org-publish-project-alist
      (list
       (list "orbit-articles"
             :auto-sitemap t
             :base-directory orbit/articles-directory
             :base-extension "org"
             :exclude (regexp-opt '("README" "lecture" "draft" "old_notes" "daily" "project"))
             :html-head-extra"<link rel=\"icon\" type=\"image/gif\" href=\"../assets/favicon.gif\"/><link rel=\"stylesheet\" href=\"../assets/css/style.css\" type=\"text/css\"/>"
             :html-preamble orbit/html-preamble
             :html-postamble: nil
             :htmlized-source t
             :publishing-directory (expand-file-name "articles" orbit/publish-directory)
             :publishing-function '(org-html-publish-to-html)
             :recursive t
             :sitemap-file-entry-format "%d *%t*"
             :sitemap-filename "index.org"
             :sitemap-sort-files 'anti-chronologically
             :sitemap-style 'list
             :sitemap-function 'orbit/sitemap
             :sitemap-title "Notes from university"
             :with-toc t
             :html-head-include-default-style nil
             :html-head-include-scripts t)
       (list "orbit-static"
             :base-directory orbit/assets-directory
             :exclude orbit/publish-directory
             :base-extension site-attachments
             :publishing-directory (expand-file-name "assets" orbit/publish-directory)
             :publishing-function 'org-publish-attachment
             :recursive t)
       (list "orbit" :components '("orbit-articles" "orbit-static"))))
#+end_src
** Org roam
#+begin_src elisp
(use-package org-roam
  :after org
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (file-truename "~/Dropbox/org/orbit/articles"))
  (org-roam-db-location (expand-file-name "org-roam.db" org-roam-directory))
  (+org-roam-open-buffer-on-find-file nil)
  (org-roam-auto-replace-fuzzy-links nil)
  (org-roam-completion-everywhere t)
  (org-roam-db-autosync-mode t)
  :config
  (eethern/leader-key-def
    :keymaps 'normal
    "n r" '(:ignore t :wk "Org roam")
    "n r f" '(org-roam-node-find :wk "Find node")
    "n r a" '(org-roam-node-random :wk "Random node")
    "n r s" '(org-roam-db-sync :wk "Sync database")
    "n r r" '(org-roam-buffer-toggle :wk "Toggle org roam status buffer")
    "n r i" '(org-roam-node-insert :wk "Insert node"))

  (setq org-roam-capture-templates
        '(("l" "latex")
          ("ld" "temporary note" plain
           (file "~/Dropbox/org/orbit/templates/draft.org")
           :target (file "draft/%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("ll" "lecture note" plain
           (file "~/Dropbox/org/orbit/templates/lecture_note.org")
           :target (file "%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("lp" "permanent note" plain
           (file "~/Dropbox/org/orbit/templates/latex.org")
           :target (file "%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("ln" "notebook" plain
           (file "~/Dropbox/org/orbit/templates/notebook.org")
           :target (file "%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("le" "exercise" plain
           (file "~/Dropbox/org/orbit/templates/exercise.org")
           :target (file "%<%y%m%d%h%m%s>-${slug}.org")
           :unnarrowed t)
          ("p" "project" plain
           (file "~/Dropbox/org/orbit/templates/project.org")
           :target (file "project/${slug}/README.org")
           :unnarrowd t)
          )))

#+end_src
** Org roam ui
#+begin_src elisp
(add-to-list 'load-path "~/.emacs.nondoom/private/org-roam-ui")
(load-library "org-roam-ui")
(setq org-roam-ui-sync-theme t
      org-roam-ui-follow t
      org-roam-ui-update-on-save t
      org-roam-ui-open-on-start t)
#+end_src

* Development
** Eshell
#+begin_src elisp
(use-package eshell
  :ensure t)

(use-package eshell-toggle
  :after eshell
  :custom
  (eshell-toggle-use-projectile t)
  :config
  (eethern/leader-key-def
    :keymaps 'normal
    "o e" '(eshell-toggle :wk "Toggle eshell")
    ))
#+end_src
** Projectile
#+begin_src elisp
(use-package projectile
  :config
  (eethern/leader-key-def
    :keymaps 'normal
    "SPC" '(projectile-find-file :wk "Find file in project")
    "p" '(:ignore t :wk "project")
    "p c" '(projectile-compile-project :wk "Compile project")
    "p f" '(projectile-find-file :wk "Find file in project")
    "p r" '(projectile-recentf :wk "Find recent file in project")
    "p p" '(projectile-switch-project :wk "Switch project"))

  (projectile-mode 1))
#+end_src
** Consult
#+begin_src elisp
(use-package consult
  :demand t
  :config
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root)
  (eethern/leader-key-def
    :keymaps 'normal
    "f r" '(consult-recent-file :wk "Recent files")
    "b b" '(consult-buffer :wk "Switch buffer")
    "s i" '(consult-imenu :wk "Jump to symbol")))
#+end_src
** Version control
*** Magit
#+begin_src elisp
(use-package magit
  :config
  (eethern/leader-key-def
    :keymaps 'normal
    "g" '(:ignore t :wk "git")
    "g g" '(magit-status :wk "Magit status")))
#+end_src
*** Git gutter
#+begin_src elisp
(use-package git-gutter
  :hook
  (prog-mode . git-gutter-mode)
  (text-mode . git-gutter-mode))
#+end_src
** Syntax checking
*** LSP
#+begin_src elisp
(use-package lsp-mode
  :straight t
  :commands lsp
  :hook ((python-mode cc-mode) . lsp)
  :bind (:map lsp-mode-map
              ("TAB" . completion-at-point))
  :custom (lsp-headerline-breadcrumb-enable nil))

(eethern/leader-key-def
  "l"  '(:ignore t :wk "lsp")
  "ld" 'xref-find-definitions
  "lr" 'xref-find-references
  "ln" 'lsp-ui-find-next-reference
  "lp" 'lsp-ui-find-prev-reference
  "ls" 'counsel-imenu
  "le" 'lsp-ui-flycheck-list
  "lS" 'lsp-ui-sideline-mode
  "lX" 'lsp-execute-code-action)

(use-package lsp-ui
  :straight t
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-sideline-enable t
        lsp-ui-sideline-show-hover nil
        lsp-ui-doc-position 'bottom
        lsp-ui-doc-delay 0.8
        )
  (lsp-ui-doc-show))
#+end_src

*** Flycheck
#+begin_src elisp
(use-package flycheck
  :defer t
  :hook (lsp-mode . flycheck-mode))
#+end_src
** Languages
*** Python
#+begin_src elisp
(use-package python
  :defer t
  :custom
  (python-indent-offset 4)
  )
(use-package anaconda-mode
  :defer t
  :hook (python-mode . anaconda-mode))

(use-package lsp-jedi
  :ensure t
  :defer t
  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls)
    (add-to-list 'lsp-enabled-clients 'jedi)))

(use-package pyenv-mode
  :ensure t
  :defer t
  :config
  (pyenv-mode))
#+end_src
*** C/C++
#+begin_src elisp
(use-package ccls
  :hook ((c-mode c++-mode objc-mode cuda-mode) .
         (lambda () (require 'ccls) (lsp))))
#+end_src
*** Matlab/octave
#+begin_src elisp
(use-package octave
  :defer t
  :config
  (setq auto-mode-alist
        (cons '("\\.m$" . octave-mode) auto-mode-alist))

  (add-hook 'octave-mode-hook
            (lambda ()
              (abbrev-mode 1)
              (auto-fill-mode 1)
              (if (eq window-system 'x)
                  (font-lock-mode 1))))
  (add-hook 'octave-mode-hook (lambda () (auto-fill-mode 0)))

  (eethern/leader-key-def
    :keymaps 'matlab-mode-map
    "m c" 'octave-send-buffer
    "m r" 'run-octave))

;; (use-package matlab-mode
;;   :ensure t
;;   :config
;;   (add-to-list 'auto-mode-alist '("\\.m$" . matlab-mode))
;;   (setq matlab-indent-function t
;;         matlab-shell-command "matlab")
;;   (eethern/leader-key-def
;;     :keymaps 'matlab-mode-map
;;     "m c" 'matlab-shell-run-cell
;;     "m r" 'matlab-shell))

#+end_src
* Runtime performance
#+begin_src elisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src


