(defvar time-visible true)

(defpoll volume :interval "1s"
         "pactl get-sink-volume @DEFAULT_SINK@ | grep -oP '\d+?(?=%)' | head -n 1")

(defwidget bar [screen]
           (box :class "bar"
                :orientation "h"
                (left)
                (center :screen screen)
                (right)))

(defwidget left []
           (box :orientation "h"
                :space-evenly false
                :halign "start"
                (systray :spacing "1" :orientation "h" :icon-size "18")
                (music)))

(defwidget center [screen]
           (box :orientation "h"
                :halign "center"
                (workspaces :screen screen)))

(defwidget right []
           (box :orientation "h"
                :space-evenly false
                :halign "end"
                (do-not-disturb)
                (vpn)
                (slider :label ":"
                        :value volume
                        :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%")
                (slider :label "  /:"
                        :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
                        :onchange "")
                (clock)
                (powermenu)))


(deflisten workspaces-listener "~/.config/eww/scripts/bspwm_workspace.sh")
(defwidget workspaces [screen]
           (literal :content {workspaces-listener[screen]}))

(defpoll time
         :interval "1s"
         :initial "initial-value"
         :run-while time-visible
         `date "+   %a %e %b    %H:%M"`)

(defwidget clock []
           (box
            :class "widget"
            :orientation "horizontal"
            :halign "end"
            time))

(deflisten music :initial ""
           "~/.config/polybar/scripts/spotify/get_spotify_status.sh")
(defpoll music-icon :interval "1s" :initial ""
           "~/.config/polybar/scripts/spotify/status_to_icon.sh")
(defwidget music []
           (box :class "widget"
                :orientation "h"
                :halign "center"
                (box :class "music-container"
                     :space-evenly false
                     (label :class "music-prefix" :text "   ")
                     (label :class "music-title" :text {music != "" ? "${music}" : ""})
                     (button :class "music-prev" :onclick `playerctl previous -p spotify` "")
                     (button :class "music-playpause" :onclick `playerctl play-pause -p spotify` music-icon)
                     (button :class "music-next" :onclick `playerctl next -p spotify` ""))))

(defwidget slider [label value onchange]
           (box :orientation "h"
                :class "slider"
                :space-evenly false
                (box :class "label" label)
                (scale :min 0 :max 101 :active {onchange != ""}
                       :value value
                       :onchange onchange)))

(defpoll do-not-disturb-poll :interval "1s" "~/.config/eww/scripts/do_not_disturb.sh")
(defwidget do-not-disturb []
           (box :class "widget"
                (box :class {do-not-disturb-poll == "" ? "active" : "inactive"}
                     (button
                      :class "do-not-disturb-button"
                      :onclick `~/.config/polybar/scripts/do_not_disturb/do_not_disturb_toggle.sh` do-not-disturb-poll))))

(defpoll vpn-poll :interval "1s" "~/.config/eww/scripts/vpn_openvpn_status.sh")
(defwidget vpn []
           (box :class "widget"
                (box :class {vpn-poll == "active" ? "positive" : "negative"}
                     :space-evenly false
                     (button
                      :class "vpn-button"
                      :onclick `polybar/.config/polybar/scripts/vpn/toggle-vpn.sh Zenseact-SE`)
                     (label :text {vpn-poll == "active" ? "   vpn" : "   vpn"}))))

(defvar powermenu-is-open "false")
(defwidget powermenu []
           (box :class "widget"
                :space-evenly false
                (revealer :transition "slideleft"
                          :reveal powermenu-is-open
                          :duration "250ms"
                          (box :class "powermenu-children-container"
                               :halign "end"
                               :space-evenly false
                               (button :class "powermenu-child-button" :onclick `~/.config/bspwm/mons.sh` "dock") "|"
                               (button :class "powermenu-child-button" :onclick `${EWW_CMD} update powermenu-is-open=false && eval alacritty` "term") "|"
                               (button :class "powermenu-child-button" :onclick `${EWW_CMD} update powermenu-is-open=false && bspc quit` "logout") "|"
                               (button :class "powermenu-child-button" :onclick `${EWW_CMD} update powermenu-is-open=false && poweroff` "shutdown") "|"
                               (button :class "powermenu-child-button" :onclick `${EWW_CMD} update powermenu-is-open=false && reboot` "reboot") "<"))
                (button :class "powermenu-reveal-button" :onclick `${EWW_CMD} update powermenu-is-open=${!powermenu-is-open}` "")))


(defwindow station-topbar [screen]
           :monitor screen
           :geometry (geometry :x "0px"
                               :y "0px"
                               :width "100%"
                               :height "28px"
                               :anchor "top center")
           :stacking "fg"
           :reserve (struts :distance "28px" :side "top")
           :windowtype "dock"
           :wm-ignore false
           (bar :screen screen))

(defwindow external [screen]
           :monitor screen
           :geometry (geometry :x "0px"
                               :y "0px"
                               :width "100%"
                               :height "28px"
                               :anchor "top center")
           :stacking "fg"
           :reserve (struts :distance "28px" :side "top")
           :windowtype "dock"
           :wm-ignore false
           (bar :screen screen))
